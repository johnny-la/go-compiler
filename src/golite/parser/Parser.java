/* This file was generated by SableCC (http://www.sablecc.org/). */

package golite.parser;

import golite.lexer.*;
import golite.node.*;
import golite.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogcstprog1CstProg */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogcstprog2CstProg */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAprogcstprog3CstProg */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAprogcstprog4CstProg */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AFuncDeclTopLevelDeclarations */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce ADeclarationsTopLevelDeclarations */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AVarDeclDeclarations */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ATypeDeclDeclarations */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce AAnoreturncstfuncdecl1CstFuncDecl */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AAnoreturncstfuncdecl2CstFuncDecl */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce AAnoreturncstfuncdecl3CstFuncDecl */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AAnoreturncstfuncdecl4CstFuncDecl */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce AAsinglereturncstfuncdecl1CstFuncDecl */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list);
            }
            break;
            case 13: /* reduce AAsinglereturncstfuncdecl2CstFuncDecl */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list);
            }
            break;
            case 14: /* reduce AAsinglereturncstfuncdecl3CstFuncDecl */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list);
            }
            break;
            case 15: /* reduce AAsinglereturncstfuncdecl4CstFuncDecl */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list);
            }
            break;
            case 16: /* reduce AMultiSig */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list);
            }
            break;
            case 17: /* reduce ARecurseSignature */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce ABaseSignature */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list);
            }
            break;
            case 19: /* reduce ASingleLineCstTypeDecl */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list);
            }
            break;
            case 20: /* reduce AAmultilinecsttypedecl1CstTypeDecl */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list);
            }
            break;
            case 21: /* reduce AAmultilinecsttypedecl2CstTypeDecl */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list);
            }
            break;
            case 22: /* reduce AAliasTypeTopLevel */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list);
            }
            break;
            case 23: /* reduce AStructTypeTopLevel */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list);
            }
            break;
            case 24: /* reduce AIdAliasTypeAliasing */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce ATypeAliasTypeAliasing */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AAtypestructdeclaration1TypeStructDeclaration */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list);
            }
            break;
            case 27: /* reduce AAtypestructdeclaration2TypeStructDeclaration */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list);
            }
            break;
            case 28: /* reduce ARecurseTypeWithOneOrMoreIds */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list);
            }
            break;
            case 29: /* reduce ABaseTypeWithOneOrMoreIds */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list);
            }
            break;
            case 30: /* reduce ACstSingleLineDeclCstVarDecl */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce AAcstmultilinedeclcstvardecl1CstVarDecl */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list);
            }
            break;
            case 32: /* reduce AAcstmultilinedeclcstvardecl2CstVarDecl */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce ACstMiatTopVarDecl */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce ACstMiaeTopVarDecl */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AMiatRecurseVarIdAndType */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AMiatEndVarIdAndType */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AMiaeRecurseVarIdAndExpMaybeType */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce AMiaeEndVarIdAndExpMaybeType */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce AMtaeEndVarIdAndExpMaybeType */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce ACstBaseTypeCstType */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce ACstSlicesCstType */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce ACstArraysCstType */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce ACstStructsCstType */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce ACstSimpleCstStmt */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce AAcstprintcststmt1CstStmt */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce AAcstprintcststmt2CstStmt */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce AAcstprintlncststmt1CstStmt */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list);
            }
            break;
            case 48: /* reduce AAcstprintlncststmt2CstStmt */
            {
                ArrayList<Object> list = new48();
                push(goTo(16), list);
            }
            break;
            case 49: /* reduce ACstReturnCstStmt */
            {
                ArrayList<Object> list = new49();
                push(goTo(16), list);
            }
            break;
            case 50: /* reduce ACstIfCstStmt */
            {
                ArrayList<Object> list = new50();
                push(goTo(16), list);
            }
            break;
            case 51: /* reduce ACstSwitchCstStmt */
            {
                ArrayList<Object> list = new51();
                push(goTo(16), list);
            }
            break;
            case 52: /* reduce ACstForCstStmt */
            {
                ArrayList<Object> list = new52();
                push(goTo(16), list);
            }
            break;
            case 53: /* reduce ACstBreakCstStmt */
            {
                ArrayList<Object> list = new53();
                push(goTo(16), list);
            }
            break;
            case 54: /* reduce ACstContinueCstStmt */
            {
                ArrayList<Object> list = new54();
                push(goTo(16), list);
            }
            break;
            case 55: /* reduce ACstIncrementCstSimpleStmt */
            {
                ArrayList<Object> list = new55();
                push(goTo(17), list);
            }
            break;
            case 56: /* reduce ACstDecrementCstSimpleStmt */
            {
                ArrayList<Object> list = new56();
                push(goTo(17), list);
            }
            break;
            case 57: /* reduce ACstAssignCstSimpleStmt */
            {
                ArrayList<Object> list = new57();
                push(goTo(17), list);
            }
            break;
            case 58: /* reduce ACstShortDeclCstSimpleStmt */
            {
                ArrayList<Object> list = new58();
                push(goTo(17), list);
            }
            break;
            case 59: /* reduce AAcstifcstifstmt1CstIfStmt */
            {
                ArrayList<Object> list = new59();
                push(goTo(18), list);
            }
            break;
            case 60: /* reduce AAcstifcstifstmt2CstIfStmt */
            {
                ArrayList<Object> list = new60();
                push(goTo(18), list);
            }
            break;
            case 61: /* reduce AFactorCstExp */
            {
                ArrayList<Object> list = new61();
                push(goTo(19), list);
            }
            break;
            case 62: /* reduce AUnaryOpCstExp */
            {
                ArrayList<Object> list = new62();
                push(goTo(19), list);
            }
            break;
            case 63: /* reduce ABinaryOpCstExp */
            {
                ArrayList<Object> list = new63();
                push(goTo(19), list);
            }
            break;
            case 64: /* reduce AFunctionCallCstExp */
            {
                ArrayList<Object> list = new64();
                push(goTo(19), list);
            }
            break;
            case 65: /* reduce AAppendExprCstExp */
            {
                ArrayList<Object> list = new65();
                push(goTo(19), list);
            }
            break;
            case 66: /* reduce ACstPlusBinaryOp */
            {
                ArrayList<Object> list = new66();
                push(goTo(20), list);
            }
            break;
            case 67: /* reduce ACstMinusBinaryOp */
            {
                ArrayList<Object> list = new67();
                push(goTo(20), list);
            }
            break;
            case 68: /* reduce ACstLogicalOrBinaryOp */
            {
                ArrayList<Object> list = new68();
                push(goTo(20), list);
            }
            break;
            case 69: /* reduce ACstLogicalAndBinaryOp */
            {
                ArrayList<Object> list = new69();
                push(goTo(20), list);
            }
            break;
            case 70: /* reduce ACstPipeBinaryOp */
            {
                ArrayList<Object> list = new70();
                push(goTo(20), list);
            }
            break;
            case 71: /* reduce ACstCaretBinaryOp */
            {
                ArrayList<Object> list = new71();
                push(goTo(20), list);
            }
            break;
            case 72: /* reduce ACstRelOpBinaryOp */
            {
                ArrayList<Object> list = new72();
                push(goTo(20), list);
            }
            break;
            case 73: /* reduce ACstEqualsEqualsRelOp */
            {
                ArrayList<Object> list = new73();
                push(goTo(21), list);
            }
            break;
            case 74: /* reduce ACstNotEqualsRelOp */
            {
                ArrayList<Object> list = new74();
                push(goTo(21), list);
            }
            break;
            case 75: /* reduce ACstLessThanRelOp */
            {
                ArrayList<Object> list = new75();
                push(goTo(21), list);
            }
            break;
            case 76: /* reduce ACstGreaterThanRelOp */
            {
                ArrayList<Object> list = new76();
                push(goTo(21), list);
            }
            break;
            case 77: /* reduce ACstLessThanEqualsRelOp */
            {
                ArrayList<Object> list = new77();
                push(goTo(21), list);
            }
            break;
            case 78: /* reduce ACstGreaterThanEqualsRelOp */
            {
                ArrayList<Object> list = new78();
                push(goTo(21), list);
            }
            break;
            case 79: /* reduce APositiveExpressionUnaryOp */
            {
                ArrayList<Object> list = new79();
                push(goTo(22), list);
            }
            break;
            case 80: /* reduce ANegativeExpressionUnaryOp */
            {
                ArrayList<Object> list = new80();
                push(goTo(22), list);
            }
            break;
            case 81: /* reduce ACaretExpressionUnaryOp */
            {
                ArrayList<Object> list = new81();
                push(goTo(22), list);
            }
            break;
            case 82: /* reduce AExclamationExoressionUnaryOp */
            {
                ArrayList<Object> list = new82();
                push(goTo(22), list);
            }
            break;
            case 83: /* reduce AEmptyArgsFunctionCall */
            {
                ArrayList<Object> list = new83();
                push(goTo(23), list);
            }
            break;
            case 84: /* reduce AAoneormoreargsfunctioncall1FunctionCall */
            {
                ArrayList<Object> list = new84();
                push(goTo(23), list);
            }
            break;
            case 85: /* reduce AAoneormoreargsfunctioncall2FunctionCall */
            {
                ArrayList<Object> list = new85();
                push(goTo(23), list);
            }
            break;
            case 86: /* reduce AMultipleArgsInputArgList */
            {
                ArrayList<Object> list = new86();
                push(goTo(24), list);
            }
            break;
            case 87: /* reduce AAppendExpr */
            {
                ArrayList<Object> list = new87();
                push(goTo(25), list);
            }
            break;
            case 88: /* reduce AOtherExp */
            {
                ArrayList<Object> list = new88();
                push(goTo(26), list);
            }
            break;
            case 89: /* reduce ACstTimesFactor */
            {
                ArrayList<Object> list = new89();
                push(goTo(27), list);
            }
            break;
            case 90: /* reduce ACstDivideFactor */
            {
                ArrayList<Object> list = new90();
                push(goTo(27), list);
            }
            break;
            case 91: /* reduce ACstModuloFactor */
            {
                ArrayList<Object> list = new91();
                push(goTo(27), list);
            }
            break;
            case 92: /* reduce ACstShiftLeftFactor */
            {
                ArrayList<Object> list = new92();
                push(goTo(27), list);
            }
            break;
            case 93: /* reduce ACstShiftRightFactor */
            {
                ArrayList<Object> list = new93();
                push(goTo(27), list);
            }
            break;
            case 94: /* reduce ACstAmpersandFactor */
            {
                ArrayList<Object> list = new94();
                push(goTo(27), list);
            }
            break;
            case 95: /* reduce ACstAmpersandCaretFactor */
            {
                ArrayList<Object> list = new95();
                push(goTo(27), list);
            }
            break;
            case 96: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new96();
                push(goTo(27), list);
            }
            break;
            case 97: /* reduce ACstElseIfCstEndIf */
            {
                ArrayList<Object> list = new97();
                push(goTo(28), list);
            }
            break;
            case 98: /* reduce ACstElseCstEndIf */
            {
                ArrayList<Object> list = new98();
                push(goTo(28), list);
            }
            break;
            case 99: /* reduce ACstBlockCstBlock */
            {
                ArrayList<Object> list = new99();
                push(goTo(29), list);
            }
            break;
            case 100: /* reduce AAcststmtlistcststmtlist1CstStmtList */
            {
                ArrayList<Object> list = new100();
                push(goTo(30), list);
            }
            break;
            case 101: /* reduce AAcststmtlistcststmtlist2CstStmtList */
            {
                ArrayList<Object> list = new101();
                push(goTo(30), list);
            }
            break;
            case 102: /* reduce ACstStmtEosCstStmtEos */
            {
                ArrayList<Object> list = new102();
                push(goTo(31), list);
            }
            break;
            case 103: /* reduce AAcstswitchcstswitchstmt1CstSwitchStmt */
            {
                ArrayList<Object> list = new103();
                push(goTo(32), list);
            }
            break;
            case 104: /* reduce AAcstswitchcstswitchstmt2CstSwitchStmt */
            {
                ArrayList<Object> list = new104();
                push(goTo(32), list);
            }
            break;
            case 105: /* reduce AAcstswitchcstswitchstmt3CstSwitchStmt */
            {
                ArrayList<Object> list = new105();
                push(goTo(32), list);
            }
            break;
            case 106: /* reduce AAcstswitchcstswitchstmt4CstSwitchStmt */
            {
                ArrayList<Object> list = new106();
                push(goTo(32), list);
            }
            break;
            case 107: /* reduce AAcstswitchcstswitchstmt5CstSwitchStmt */
            {
                ArrayList<Object> list = new107();
                push(goTo(32), list);
            }
            break;
            case 108: /* reduce AAcstswitchcstswitchstmt6CstSwitchStmt */
            {
                ArrayList<Object> list = new108();
                push(goTo(32), list);
            }
            break;
            case 109: /* reduce AAcstswitchcstswitchstmt7CstSwitchStmt */
            {
                ArrayList<Object> list = new109();
                push(goTo(32), list);
            }
            break;
            case 110: /* reduce AAcstswitchcstswitchstmt8CstSwitchStmt */
            {
                ArrayList<Object> list = new110();
                push(goTo(32), list);
            }
            break;
            case 111: /* reduce ACstSimpleEolCstSimpleStmtEol */
            {
                ArrayList<Object> list = new111();
                push(goTo(33), list);
            }
            break;
            case 112: /* reduce ACstCaseClauseCstSwitchCaseClause */
            {
                ArrayList<Object> list = new112();
                push(goTo(34), list);
            }
            break;
            case 113: /* reduce ACstCaseCstSwitchCase */
            {
                ArrayList<Object> list = new113();
                push(goTo(35), list);
            }
            break;
            case 114: /* reduce ACstSwitchCstSwitchCase */
            {
                ArrayList<Object> list = new114();
                push(goTo(35), list);
            }
            break;
            case 115: /* reduce ACstExpCstForCondition */
            {
                ArrayList<Object> list = new115();
                push(goTo(36), list);
            }
            break;
            case 116: /* reduce AAcstclausecstforcondition1CstForCondition */
            {
                ArrayList<Object> list = new116();
                push(goTo(36), list);
            }
            break;
            case 117: /* reduce AAcstclausecstforcondition2CstForCondition */
            {
                ArrayList<Object> list = new117();
                push(goTo(36), list);
            }
            break;
            case 118: /* reduce AAcstclausecstforcondition3CstForCondition */
            {
                ArrayList<Object> list = new118();
                push(goTo(36), list);
            }
            break;
            case 119: /* reduce AAcstclausecstforcondition4CstForCondition */
            {
                ArrayList<Object> list = new119();
                push(goTo(36), list);
            }
            break;
            case 120: /* reduce AAcstclausecstforcondition5CstForCondition */
            {
                ArrayList<Object> list = new120();
                push(goTo(36), list);
            }
            break;
            case 121: /* reduce AAcstclausecstforcondition6CstForCondition */
            {
                ArrayList<Object> list = new121();
                push(goTo(36), list);
            }
            break;
            case 122: /* reduce AAcstclausecstforcondition7CstForCondition */
            {
                ArrayList<Object> list = new122();
                push(goTo(36), list);
            }
            break;
            case 123: /* reduce AAcstclausecstforcondition8CstForCondition */
            {
                ArrayList<Object> list = new123();
                push(goTo(36), list);
            }
            break;
            case 124: /* reduce ACstAssignStmtCstAssignStmt */
            {
                ArrayList<Object> list = new124();
                push(goTo(37), list);
            }
            break;
            case 125: /* reduce ACstAssignOpStmtCstAssignStmt */
            {
                ArrayList<Object> list = new125();
                push(goTo(37), list);
            }
            break;
            case 126: /* reduce ALvalueAssignCstAssignOpStmt */
            {
                ArrayList<Object> list = new126();
                push(goTo(38), list);
            }
            break;
            case 127: /* reduce ALvalueAssignListCstAssignOpStmt */
            {
                ArrayList<Object> list = new127();
                push(goTo(38), list);
            }
            break;
            case 128: /* reduce ACstShortDeclCstShortDeclStmt */
            {
                ArrayList<Object> list = new128();
                push(goTo(39), list);
            }
            break;
            case 129: /* reduce ACstIdCommanCstIdComma */
            {
                ArrayList<Object> list = new129();
                push(goTo(40), list);
            }
            break;
            case 130: /* reduce ACstExpCstExpList */
            {
                ArrayList<Object> list = new130();
                push(goTo(41), list);
            }
            break;
            case 131: /* reduce ACstExpListCstExpList */
            {
                ArrayList<Object> list = new131();
                push(goTo(41), list);
            }
            break;
            case 132: /* reduce ACstIdTerm */
            {
                ArrayList<Object> list = new132();
                push(goTo(42), list);
            }
            break;
            case 133: /* reduce ACstFloat64Term */
            {
                ArrayList<Object> list = new133();
                push(goTo(42), list);
            }
            break;
            case 134: /* reduce ACstIntTerm */
            {
                ArrayList<Object> list = new134();
                push(goTo(42), list);
            }
            break;
            case 135: /* reduce ACstRuneLiteralTerm */
            {
                ArrayList<Object> list = new135();
                push(goTo(42), list);
            }
            break;
            case 136: /* reduce ACstRawStringLitTerm */
            {
                ArrayList<Object> list = new136();
                push(goTo(42), list);
            }
            break;
            case 137: /* reduce ACstInterpretedStringLiteralTerm */
            {
                ArrayList<Object> list = new137();
                push(goTo(42), list);
            }
            break;
            case 138: /* reduce AParenTerm */
            {
                ArrayList<Object> list = new138();
                push(goTo(42), list);
            }
            break;
            case 139: /* reduce ACstIdLvalue */
            {
                ArrayList<Object> list = new139();
                push(goTo(43), list);
            }
            break;
            case 140: /* reduce AArrayIndexLvalue */
            {
                ArrayList<Object> list = new140();
                push(goTo(43), list);
            }
            break;
            case 141: /* reduce AStructSelectorLvalue */
            {
                ArrayList<Object> list = new141();
                push(goTo(43), list);
            }
            break;
            case 142: /* reduce ACstIndexCstIndex */
            {
                ArrayList<Object> list = new142();
                push(goTo(44), list);
            }
            break;
            case 143: /* reduce ACstSelectorCstSelector */
            {
                ArrayList<Object> list = new143();
                push(goTo(45), list);
            }
            break;
            case 144: /* reduce ATerminal$TopLevelDeclarations */
            {
                ArrayList<Object> list = new144();
                push(goTo(46), list);
            }
            break;
            case 145: /* reduce ANonTerminal$TopLevelDeclarations */
            {
                ArrayList<Object> list = new145();
                push(goTo(46), list);
            }
            break;
            case 146: /* reduce ATerminal$CstStmt */
            {
                ArrayList<Object> list = new146();
                push(goTo(47), list);
            }
            break;
            case 147: /* reduce ANonTerminal$CstStmt */
            {
                ArrayList<Object> list = new147();
                push(goTo(47), list);
            }
            break;
            case 148: /* reduce ATerminal$Signature */
            {
                ArrayList<Object> list = new148();
                push(goTo(48), list);
            }
            break;
            case 149: /* reduce ANonTerminal$Signature */
            {
                ArrayList<Object> list = new149();
                push(goTo(48), list);
            }
            break;
            case 150: /* reduce ATerminal$TypeTopLevel */
            {
                ArrayList<Object> list = new150();
                push(goTo(49), list);
            }
            break;
            case 151: /* reduce ANonTerminal$TypeTopLevel */
            {
                ArrayList<Object> list = new151();
                push(goTo(49), list);
            }
            break;
            case 152: /* reduce ATerminal$TypeWithOneOrMoreIds */
            {
                ArrayList<Object> list = new152();
                push(goTo(50), list);
            }
            break;
            case 153: /* reduce ANonTerminal$TypeWithOneOrMoreIds */
            {
                ArrayList<Object> list = new153();
                push(goTo(50), list);
            }
            break;
            case 154: /* reduce ATerminal$TopVarDecl */
            {
                ArrayList<Object> list = new154();
                push(goTo(51), list);
            }
            break;
            case 155: /* reduce ANonTerminal$TopVarDecl */
            {
                ArrayList<Object> list = new155();
                push(goTo(51), list);
            }
            break;
            case 156: /* reduce ATerminal$InputArgList */
            {
                ArrayList<Object> list = new156();
                push(goTo(52), list);
            }
            break;
            case 157: /* reduce ANonTerminal$InputArgList */
            {
                ArrayList<Object> list = new157();
                push(goTo(52), list);
            }
            break;
            case 158: /* reduce ATerminal$CstStmtEos */
            {
                ArrayList<Object> list = new158();
                push(goTo(53), list);
            }
            break;
            case 159: /* reduce ANonTerminal$CstStmtEos */
            {
                ArrayList<Object> list = new159();
                push(goTo(53), list);
            }
            break;
            case 160: /* reduce ATerminal$CstSwitchCaseClause */
            {
                ArrayList<Object> list = new160();
                push(goTo(54), list);
            }
            break;
            case 161: /* reduce ANonTerminal$CstSwitchCaseClause */
            {
                ArrayList<Object> list = new161();
                push(goTo(54), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogcstprog1CstProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogcstprog2CstProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode3, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprogcstprog3CstProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(listNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprogcstprog4CstProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramNode1 = new AProgram(listNode3, listNode5);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFuncDeclTopLevelDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        pdeclNode1 = new AFuncDeclAstDecl(pfuncdeclNode2);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADeclarationsTopLevelDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVarDeclDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PVarDecl pvardeclNode2;
        pvardeclNode2 = (PVarDecl)nodeArrayList1.get(0);

        pdeclNode1 = new AVarDeclAstDecl(pvardeclNode2);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ATypeDeclDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PTypeDecl ptypedeclNode2;
        ptypedeclNode2 = (PTypeDecl)nodeArrayList1.get(0);

        pdeclNode1 = new ATypeDeclAstDecl(ptypedeclNode2);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAnoreturncstfuncdecl1CstFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }

        pfuncdeclNode1 = new ANoReturnFuncDecl(tidNode2, null, listNode4);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAnoreturncstfuncdecl2CstFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TId tidNode2;
        PSignature psignatureNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        psignatureNode3 = (PSignature)nodeArrayList4.get(0);
        {
            // Block
        }

        pfuncdeclNode1 = new ANoReturnFuncDecl(tidNode2, psignatureNode3, listNode4);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAnoreturncstfuncdecl3CstFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfuncdeclNode1 = new ANoReturnFuncDecl(tidNode2, null, listNode5);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAnoreturncstfuncdecl4CstFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TId tidNode2;
        PSignature psignatureNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        psignatureNode3 = (PSignature)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList7.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfuncdeclNode1 = new ANoReturnFuncDecl(tidNode2, psignatureNode3, listNode5);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAsinglereturncstfuncdecl1CstFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PVarType pvartypeNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TId tidNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pvartypeNode4 = (PVarType)nodeArrayList5.get(0);
        {
            // Block
        }
        tidNode6 = (TId)nodeArrayList8.get(0);

        pfuncdeclNode1 = new ASingleReturnFuncDecl(tidNode2, null, pvartypeNode4, listNode5, tidNode6);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAsinglereturncstfuncdecl2CstFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TId tidNode2;
        PSignature psignatureNode3;
        PVarType pvartypeNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TId tidNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        psignatureNode3 = (PSignature)nodeArrayList4.get(0);
        pvartypeNode4 = (PVarType)nodeArrayList6.get(0);
        {
            // Block
        }
        tidNode6 = (TId)nodeArrayList9.get(0);

        pfuncdeclNode1 = new ASingleReturnFuncDecl(tidNode2, psignatureNode3, pvartypeNode4, listNode5, tidNode6);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAsinglereturncstfuncdecl3CstFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PVarType pvartypeNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pvartypeNode4 = (PVarType)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidNode7 = (TId)nodeArrayList9.get(0);

        pfuncdeclNode1 = new ASingleReturnFuncDecl(tidNode2, null, pvartypeNode4, listNode6, tidNode7);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAsinglereturncstfuncdecl4CstFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TId tidNode2;
        PSignature psignatureNode3;
        PVarType pvartypeNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        psignatureNode3 = (PSignature)nodeArrayList4.get(0);
        pvartypeNode4 = (PVarType)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidNode7 = (TId)nodeArrayList10.get(0);

        pfuncdeclNode1 = new ASingleReturnFuncDecl(tidNode2, psignatureNode3, pvartypeNode4, listNode6, tidNode7);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AMultiSig */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSignature psignatureNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        psignatureNode1 = new AMultipleTypesSignature(listNode3);
        }
	nodeList.add(psignatureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ARecurseSignature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSignature psignatureNode1;
        {
            // Block
        TId tidNode2;
        PSignature psignatureNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        psignatureNode3 = (PSignature)nodeArrayList3.get(0);

        psignatureNode1 = new AManyIdToTypeSignature(tidNode2, psignatureNode3);
        }
	nodeList.add(psignatureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABaseSignature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSignature psignatureNode1;
        {
            // Block
        TId tidNode2;
        PVarType pvartypeNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pvartypeNode3 = (PVarType)nodeArrayList2.get(0);

        psignatureNode1 = new ASingleIdToTypeSignature(tidNode2, pvartypeNode3);
        }
	nodeList.add(psignatureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASingleLineCstTypeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        ptypedeclNode1 = (PTypeDecl)nodeArrayList2.get(0);
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmultilinecsttypedecl1CstTypeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        ptypedeclNode1 = new AMultilineListTypeDecl(listNode2);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAmultilinecsttypedecl2CstTypeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ptypedeclNode1 = new AMultilineListTypeDecl(listNode3);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAliasTypeTopLevel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        ptypedeclNode1 = (PTypeDecl)nodeArrayList1.get(0);
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AStructTypeTopLevel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        ptypedeclNode1 = (PTypeDecl)nodeArrayList1.get(0);
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIdAliasTypeAliasing */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        TId tidNode2;
        PVarType pvartypeNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pvartypeNode3 = (PVarType)nodeArrayList2.get(0);

        ptypedeclNode1 = new ATypeAliasTypeDecl(tidNode2, pvartypeNode3);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ATypeAliasTypeAliasing */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        TType ttypeNode2;
        PVarType pvartypeNode3;
        ttypeNode2 = (TType)nodeArrayList1.get(0);
        pvartypeNode3 = (PVarType)nodeArrayList2.get(0);

        ptypedeclNode1 = new ATypeAliasBaseTypeDecl(ttypeNode2, pvartypeNode3);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAtypestructdeclaration1TypeStructDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypedeclNode1 = new AStructWithIdTypeDecl(tidNode2, listNode3);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAtypestructdeclaration2TypeStructDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypedeclNode1 = new AStructWithIdTypeDecl(tidNode2, listNode4);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ARecurseTypeWithOneOrMoreIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        TId tidNode2;
        PTypeDecl ptypedeclNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypedeclNode3 = (PTypeDecl)nodeArrayList3.get(0);

        ptypedeclNode1 = new ATypeWithManyIdsTypeDecl(tidNode2, ptypedeclNode3);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ABaseTypeWithOneOrMoreIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeDecl ptypedeclNode1;
        {
            // Block
        TId tidNode2;
        PVarType pvartypeNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pvartypeNode3 = (PVarType)nodeArrayList2.get(0);

        ptypedeclNode1 = new ATypeAliasTypeDecl(tidNode2, pvartypeNode3);
        }
	nodeList.add(ptypedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ACstSingleLineDeclCstVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList2.get(0);
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAcstmultilinedeclcstvardecl1CstVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pvardeclNode1 = new AMultilineListVarDecl(listNode2);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAcstmultilinedeclcstvardecl2CstVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pvardeclNode1 = new AMultilineListVarDecl(listNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ACstMiatTopVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ACstMiaeTopVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AMiatRecurseVarIdAndType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TId tidNode2;
        PVarDecl pvardeclNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pvardeclNode3 = (PVarDecl)nodeArrayList3.get(0);

        pvardeclNode1 = new AInlineListNoExpVarDecl(tidNode2, pvardeclNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMiatEndVarIdAndType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TId tidNode2;
        PVarType pvartypeNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pvartypeNode3 = (PVarType)nodeArrayList2.get(0);

        pvardeclNode1 = new AVarWithTypeVarDecl(tidNode2, pvartypeNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AMiaeRecurseVarIdAndExpMaybeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TId tidNode2;
        PVarDecl pvardeclNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pvardeclNode3 = (PVarDecl)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList5.get(0);

        pvardeclNode1 = new AInlineListWithExpVarDecl(tidNode2, pvardeclNode3, pexpNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMiaeEndVarIdAndExpMaybeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pvardeclNode1 = new AVarWithOnlyExpVarDecl(tidNode2, pexpNode3);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AMtaeEndVarIdAndExpMaybeType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TId tidNode2;
        PVarType pvartypeNode3;
        PExp pexpNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pvartypeNode3 = (PVarType)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList4.get(0);

        pvardeclNode1 = new AVarWithTypeAndExpVarDecl(tidNode2, pvartypeNode3, pexpNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ACstBaseTypeCstType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TType ttypeNode2;
        ttypeNode2 = (TType)nodeArrayList1.get(0);

        pvartypeNode1 = new ABaseTypeVarType(ttypeNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ACstSlicesCstType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        PVarType pvartypeNode2;
        pvartypeNode2 = (PVarType)nodeArrayList3.get(0);

        pvartypeNode1 = new ASliceVarType(pvartypeNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ACstArraysCstType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        PVarType pvartypeNode2;
        pvartypeNode2 = (PVarType)nodeArrayList4.get(0);

        pvartypeNode1 = new AArrayVarType(pvartypeNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ACstStructsCstType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvartypeNode1 = new AStructVarType(tidNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ACstSimpleCstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAcstprintcststmt1CstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pstmtNode1 = new APrintStmt(null);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAcstprintcststmt2CstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new APrintStmt(pexpNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAcstprintlncststmt1CstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pstmtNode1 = new APrintlnStmt(null);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAcstprintlncststmt2CstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new APrintlnStmt(pexpNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ACstReturnCstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pstmtNode1 = new AReturnStmt(pexpNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ACstIfCstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ACstSwitchCstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ACstForCstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmt pstmtNode3;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList3.get(0);

        pstmtNode1 = new AForStmt(pexpNode2, pstmtNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACstBreakCstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new ABreakStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ACstContinueCstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AContinueStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ACstIncrementCstSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pstmtNode1 = new AIncrementStmt(pexpNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ACstDecrementCstSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pstmtNode1 = new ADecrementStmt(pexpNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ACstAssignCstSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ACstShortDeclCstSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAcstifcstifstmt1CstIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmt pstmtNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList3.get(0);

        pstmtNode1 = new AIfStmt(pexpNode2, pstmtNode3, null);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAcstifcstifstmt2CstIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmt pstmtNode3;
        PStmt pstmtNode4;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList3.get(0);
        pstmtNode4 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AIfStmt(pexpNode2, pstmtNode3, pstmtNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AFactorCstExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AUnaryOpCstExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ABinaryOpCstExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AFunctionCallCstExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAppendExprCstExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ACstPlusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ACstMinusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ACstLogicalOrBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALogicalOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ACstLogicalAndBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALogicalAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ACstPipeBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APipeExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ACstCaretBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ACaretExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ACstRelOpBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ACstEqualsEqualsRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqualsEqualsExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ACstNotEqualsRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ANotEqualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ACstLessThanRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALessExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ACstGreaterThanRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ACstLessThanEqualsRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALessEqualsExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ACstGreaterThanEqualsRelOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGreaterEqualsExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce APositiveExpressionUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AUnaryPlusExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANegativeExpressionUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AUnaryMinusExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ACaretExpressionUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AUnaryXorExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AExclamationExoressionUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AUnaryExclamationExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AEmptyArgsFunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AFunctionCallExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AAoneormoreargsfunctioncall1FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AFunctionCallExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AAoneormoreargsfunctioncall2FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AFunctionCallExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AMultipleArgsInputArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAppendExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList5.get(0);

        pexpNode1 = new AAppendedExprExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AOtherExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ACstTimesFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ACstDivideFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivideExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ACstModuloFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModuloExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ACstShiftLeftFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AShiftLeftExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ACstShiftRightFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AShiftRightExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ACstAmpersandFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAmpersandExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ACstAmpersandCaretFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAmpersandCaretExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ACstElseIfCstEndIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);

        pstmtNode1 = new AElseifStmt(pstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ACstElseCstEndIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);

        pstmtNode1 = new AElseStmt(pstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ACstBlockCstBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstmtNode1 = new ABlockStmt(listNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce AAcststmtlistcststmtlist1CstStmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce AAcststmtlistcststmtlist2CstStmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ACstStmtEosCstStmtEos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AAcstswitchcstswitchstmt1CstSwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce AAcstswitchcstswitchstmt2CstSwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce AAcstswitchcstswitchstmt3CstSwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce AAcstswitchcstswitchstmt4CstSwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce AAcstswitchcstswitchstmt5CstSwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce AAcstswitchcstswitchstmt6CstSwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce AAcstswitchcstswitchstmt7CstSwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce AAcstswitchcstswitchstmt8CstSwitchStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ACstSimpleEolCstSimpleStmtEol */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ACstCaseClauseCstSwitchCaseClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ACstCaseCstSwitchCase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce ACstSwitchCstSwitchCase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new AEmptyStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ACstExpCstForCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce AAcstclausecstforcondition1CstForCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;

        pexpNode1 = new AForCondExp(null, null, null);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce AAcstclausecstforcondition2CstForCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PStmt pstmtNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);

        pexpNode1 = new AForCondExp(pstmtNode2, null, null);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce AAcstclausecstforcondition3CstForCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PExp pexpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AForCondExp(null, pexpNode3, null);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce AAcstclausecstforcondition4CstForCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PStmt pstmtNode2;
        PExp pexpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AForCondExp(pstmtNode2, pexpNode3, null);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce AAcstclausecstforcondition5CstForCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PStmt pstmtNode4;
        pstmtNode4 = (PStmt)nodeArrayList3.get(0);

        pexpNode1 = new AForCondExp(null, null, pstmtNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce AAcstclausecstforcondition6CstForCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PStmt pstmtNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PStmt pstmtNode4;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pstmtNode4 = (PStmt)nodeArrayList4.get(0);

        pexpNode1 = new AForCondExp(pstmtNode2, null, pstmtNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce AAcstclausecstforcondition7CstForCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PExp pexpNode3;
        PStmt pstmtNode4;
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        pstmtNode4 = (PStmt)nodeArrayList4.get(0);

        pexpNode1 = new AForCondExp(null, pexpNode3, pstmtNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce AAcstclausecstforcondition8CstForCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PStmt pstmtNode2;
        PExp pexpNode3;
        PStmt pstmtNode4;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);
        pstmtNode4 = (PStmt)nodeArrayList5.get(0);

        pexpNode1 = new AForCondExp(pstmtNode2, pexpNode3, pstmtNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce ACstAssignStmtCstAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        TOpEquals topequalsNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        topequalsNode3 = (TOpEquals)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new AAssignOpStmt(pexpNode2, topequalsNode3, pexpNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce ACstAssignOpStmtCstAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce ALvalueAssignCstAssignOpStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new AAssignStmt(pexpNode2, pexpNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new127() /* reduce ALvalueAssignListCstAssignOpStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExp pexpNode2;
        PStmt pstmtNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pstmtNode3 = (PStmt)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList5.get(0);

        pstmtNode1 = new AAssignListStmt(pexpNode2, pstmtNode3, pexpNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new128() /* reduce ACstShortDeclCstShortDeclStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pstmtNode1 = new AShortDeclStmt(tidNode2, pexpNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new129() /* reduce ACstIdCommanCstIdComma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	nodeList.add(tidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new130() /* reduce ACstExpCstExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new131() /* reduce ACstExpListCstExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AListExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new132() /* reduce ACstIdTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AIdExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new133() /* reduce ACstFloat64Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFloat64Literal tfloat64literalNode2;
        tfloat64literalNode2 = (TFloat64Literal)nodeArrayList1.get(0);

        pexpNode1 = new AFloat64LiteralExp(tfloat64literalNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new134() /* reduce ACstIntTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pexpNode1 = new AIntExp(tintNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new135() /* reduce ACstRuneLiteralTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TRuneLiteral truneliteralNode2;
        truneliteralNode2 = (TRuneLiteral)nodeArrayList1.get(0);

        pexpNode1 = new ARuneLiteralExp(truneliteralNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new136() /* reduce ACstRawStringLitTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TRawStringLit trawstringlitNode2;
        trawstringlitNode2 = (TRawStringLit)nodeArrayList1.get(0);

        pexpNode1 = new ARawStringLitExp(trawstringlitNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new137() /* reduce ACstInterpretedStringLiteralTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInterpretedStringLiteral tinterpretedstringliteralNode2;
        tinterpretedstringliteralNode2 = (TInterpretedStringLiteral)nodeArrayList1.get(0);

        pexpNode1 = new AInterpretedStringLiteralExp(tinterpretedstringliteralNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new138() /* reduce AParenTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new139() /* reduce ACstIdLvalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpNode1 = new AIdExp(tidNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new140() /* reduce AArrayIndexLvalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AArrayIndexExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new141() /* reduce AStructSelectorLvalue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AStructSelectorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new142() /* reduce ACstIndexCstIndex */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new143() /* reduce ACstSelectorCstSelector */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new144() /* reduce ATerminal$TopLevelDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode1 != null)
	{
	  listNode2.add(pdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new145() /* reduce ANonTerminal$TopLevelDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecl pdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode2 = (PDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new146() /* reduce ATerminal$CstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new147() /* reduce ANonTerminal$CstStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new148() /* reduce ATerminal$Signature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSignature psignatureNode1;
        psignatureNode1 = (PSignature)nodeArrayList1.get(0);
	if(psignatureNode1 != null)
	{
	  listNode2.add(psignatureNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new149() /* reduce ANonTerminal$Signature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSignature psignatureNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psignatureNode2 = (PSignature)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psignatureNode2 != null)
	{
	  listNode3.add(psignatureNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new150() /* reduce ATerminal$TypeTopLevel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PTypeDecl ptypedeclNode1;
        ptypedeclNode1 = (PTypeDecl)nodeArrayList1.get(0);
	if(ptypedeclNode1 != null)
	{
	  listNode2.add(ptypedeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new151() /* reduce ANonTerminal$TypeTopLevel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PTypeDecl ptypedeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptypedeclNode2 = (PTypeDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptypedeclNode2 != null)
	{
	  listNode3.add(ptypedeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new152() /* reduce ATerminal$TypeWithOneOrMoreIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PTypeDecl ptypedeclNode1;
        ptypedeclNode1 = (PTypeDecl)nodeArrayList1.get(0);
	if(ptypedeclNode1 != null)
	{
	  listNode2.add(ptypedeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new153() /* reduce ANonTerminal$TypeWithOneOrMoreIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PTypeDecl ptypedeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptypedeclNode2 = (PTypeDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptypedeclNode2 != null)
	{
	  listNode3.add(ptypedeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new154() /* reduce ATerminal$TopVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new155() /* reduce ANonTerminal$TopVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new156() /* reduce ATerminal$InputArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new157() /* reduce ANonTerminal$InputArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new158() /* reduce ATerminal$CstStmtEos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new159() /* reduce ANonTerminal$CstStmtEos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new160() /* reduce ATerminal$CstSwitchCaseClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new161() /* reduce ANonTerminal$CstSwitchCaseClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {14, SHIFT, 6}, {20, SHIFT, 7}, {23, SHIFT, 8}, {26, SHIFT, 9}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, ERROR, 1}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 4}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {60, SHIFT, 49}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 50}, },
			{{-1, ERROR, 5}, {76, SHIFT, 54}, },
			{{-1, ERROR, 6}, {53, SHIFT, 55}, {76, SHIFT, 56}, },
			{{-1, ERROR, 7}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 8}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {57, SHIFT, 61}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 50}, },
			{{-1, ERROR, 9}, {25, SHIFT, 65}, {53, SHIFT, 66}, {76, SHIFT, 67}, },
			{{-1, ERROR, 10}, {53, SHIFT, 71}, },
			{{-1, ERROR, 11}, {53, SHIFT, 72}, },
			{{-1, REDUCE, 139}, {51, SHIFT, 73}, },
			{{-1, ERROR, 13}, {77, ACCEPT, -1}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 26}, {24, SHIFT, 74}, {41, SHIFT, 75}, {42, SHIFT, 76}, {46, SHIFT, 77}, {55, SHIFT, 78}, {59, SHIFT, 79}, {62, SHIFT, 80}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {11, SHIFT, 5}, {14, SHIFT, 6}, {20, SHIFT, 7}, {23, SHIFT, 8}, {26, SHIFT, 9}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 7}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, ERROR, 29}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 30}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 31}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 32}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 33}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 34}, {53, SHIFT, 92}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 132}, {53, SHIFT, 93}, },
			{{-1, ERROR, 41}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, {57, SHIFT, 106}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 61}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 49}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {60, SHIFT, 115}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 132}, {24, REDUCE, 139}, {41, REDUCE, 139}, {42, REDUCE, 139}, {46, REDUCE, 139}, {51, SHIFT, 73}, {53, SHIFT, 93}, {55, REDUCE, 139}, {59, REDUCE, 139}, {62, REDUCE, 139}, },
			{{-1, ERROR, 51}, {60, SHIFT, 117}, },
			{{-1, REDUCE, 115}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, ERROR, 53}, {57, SHIFT, 106}, },
			{{-1, ERROR, 54}, {53, SHIFT, 119}, },
			{{-1, ERROR, 55}, {54, SHIFT, 120}, {76, SHIFT, 56}, },
			{{-1, ERROR, 56}, {25, SHIFT, 123}, {46, SHIFT, 124}, {55, SHIFT, 125}, {59, SHIFT, 126}, {76, SHIFT, 127}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 58}, {60, SHIFT, 129}, },
			{{-1, ERROR, 59}, {60, SHIFT, 130}, },
			{{-1, REDUCE, 49}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, ERROR, 61}, {3, SHIFT, 131}, {7, SHIFT, 132}, {58, SHIFT, 133}, },
			{{-1, ERROR, 62}, {60, SHIFT, 137}, },
			{{-1, ERROR, 63}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, {57, SHIFT, 138}, },
			{{-1, ERROR, 64}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {57, SHIFT, 139}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 65}, {25, SHIFT, 123}, {55, SHIFT, 125}, {76, SHIFT, 127}, },
			{{-1, ERROR, 66}, {25, SHIFT, 65}, {54, SHIFT, 142}, {76, SHIFT, 67}, },
			{{-1, ERROR, 67}, {22, SHIFT, 145}, {25, SHIFT, 123}, {55, SHIFT, 125}, {76, SHIFT, 127}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 69}, {60, SHIFT, 147}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 71}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {54, SHIFT, 148}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 72}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {54, SHIFT, 151}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 73}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 74}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 77}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 78}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 79}, {76, SHIFT, 157}, },
			{{-1, ERROR, 80}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 7}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 79}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 80}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 81}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 82}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, ERROR, 91}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, {54, SHIFT, 161}, },
			{{-1, ERROR, 92}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 93}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {54, SHIFT, 163}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 94}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 95}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 96}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 97}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 98}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 99}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 100}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 101}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 102}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 103}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 104}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 105}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, REDUCE, 100}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 7}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, REDUCE, 59}, {1, SHIFT, 181}, },
			{{-1, ERROR, 108}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 109}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 110}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 111}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 112}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 113}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, ERROR, 114}, {53, SHIFT, 33}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 86}, },
			{{-1, REDUCE, 116}, {76, SHIFT, 12}, },
			{{-1, ERROR, 116}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, {60, SHIFT, 191}, },
			{{-1, ERROR, 117}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {60, SHIFT, 192}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 119}, {54, SHIFT, 194}, {76, SHIFT, 195}, },
			{{-1, ERROR, 120}, {60, SHIFT, 199}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 122}, {54, SHIFT, 200}, {76, SHIFT, 56}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 124}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 125}, {56, SHIFT, 203}, {66, SHIFT, 204}, },
			{{-1, ERROR, 126}, {76, SHIFT, 56}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 36}, {46, SHIFT, 207}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 131}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 160}, },
			{{-1, ERROR, 135}, {61, SHIFT, 209}, },
			{{-1, ERROR, 136}, {3, SHIFT, 131}, {7, SHIFT, 132}, {58, SHIFT, 210}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 138}, {3, SHIFT, 131}, {7, SHIFT, 132}, {58, SHIFT, 212}, },
			{{-1, ERROR, 139}, {3, SHIFT, 131}, {7, SHIFT, 132}, {58, SHIFT, 214}, },
			{{-1, ERROR, 140}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, {57, SHIFT, 216}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 142}, {60, SHIFT, 217}, },
			{{-1, REDUCE, 150}, },
			{{-1, ERROR, 144}, {25, SHIFT, 65}, {54, SHIFT, 218}, {76, SHIFT, 67}, },
			{{-1, ERROR, 145}, {57, SHIFT, 220}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 130}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, ERROR, 150}, {54, SHIFT, 221}, {59, SHIFT, 222}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 152}, {54, SHIFT, 223}, {59, SHIFT, 222}, },
			{{-1, REDUCE, 128}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, REDUCE, 124}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, REDUCE, 126}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, ERROR, 156}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, {56, SHIFT, 224}, },
			{{-1, REDUCE, 139}, },
			{{-1, ERROR, 158}, {59, SHIFT, 225}, },
			{{-1, ERROR, 159}, {46, SHIFT, 77}, {55, SHIFT, 78}, {59, SHIFT, 79}, {62, SHIFT, 80}, },
			{{-1, REDUCE, 143}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, REDUCE, 138}, },
			{{-1, ERROR, 162}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, {59, SHIFT, 226}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 164}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, {54, SHIFT, 227}, {59, SHIFT, 228}, },
			{{-1, REDUCE, 66}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 67}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 70}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 71}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 69}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 68}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 73}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 75}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 76}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 74}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 77}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 78}, {29, SHIFT, 108}, {30, SHIFT, 109}, {31, SHIFT, 110}, {32, SHIFT, 111}, {35, SHIFT, 112}, {36, SHIFT, 113}, {37, SHIFT, 114}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 178}, {58, SHIFT, 231}, },
			{{-1, REDUCE, 158}, },
			{{-1, REDUCE, 101}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 7}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, ERROR, 181}, {0, SHIFT, 1}, {57, SHIFT, 106}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 118}, {76, SHIFT, 12}, },
			{{-1, REDUCE, 117}, {76, SHIFT, 12}, },
			{{-1, ERROR, 193}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, {60, SHIFT, 237}, },
			{{-1, ERROR, 194}, {25, SHIFT, 123}, {55, SHIFT, 125}, {57, SHIFT, 238}, {76, SHIFT, 127}, },
			{{-1, ERROR, 195}, {25, SHIFT, 123}, {55, SHIFT, 125}, {59, SHIFT, 240}, {76, SHIFT, 127}, },
			{{-1, ERROR, 196}, {54, SHIFT, 242}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 16}, {76, SHIFT, 195}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 200}, {60, SHIFT, 244}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 38}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, ERROR, 203}, {25, SHIFT, 123}, {55, SHIFT, 125}, {76, SHIFT, 127}, },
			{{-1, ERROR, 204}, {56, SHIFT, 246}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 206}, {59, SHIFT, 247}, },
			{{-1, ERROR, 207}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 113}, {59, SHIFT, 222}, },
			{{-1, REDUCE, 100}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 7}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 213}, {3, SHIFT, 131}, {7, SHIFT, 132}, {58, SHIFT, 250}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 215}, {3, SHIFT, 131}, {7, SHIFT, 132}, {58, SHIFT, 251}, },
			{{-1, ERROR, 216}, {3, SHIFT, 131}, {7, SHIFT, 132}, {58, SHIFT, 252}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 218}, {60, SHIFT, 254}, },
			{{-1, REDUCE, 151}, },
			{{-1, ERROR, 220}, {58, SHIFT, 255}, {76, SHIFT, 256}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 222}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 142}, },
			{{-1, ERROR, 225}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 226}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 228}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 156}, },
			{{-1, ERROR, 230}, {54, SHIFT, 264}, {59, SHIFT, 228}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 119}, {76, SHIFT, 12}, },
			{{-1, ERROR, 238}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 267}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, ERROR, 239}, {57, SHIFT, 269}, },
			{{-1, ERROR, 240}, {76, SHIFT, 195}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 242}, {25, SHIFT, 123}, {55, SHIFT, 125}, {57, SHIFT, 271}, {76, SHIFT, 127}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 246}, {25, SHIFT, 123}, {55, SHIFT, 125}, {76, SHIFT, 127}, },
			{{-1, ERROR, 247}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, REDUCE, 39}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 253}, {3, SHIFT, 131}, {7, SHIFT, 132}, {58, SHIFT, 275}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 256}, {25, SHIFT, 123}, {55, SHIFT, 125}, {59, SHIFT, 276}, {76, SHIFT, 127}, },
			{{-1, REDUCE, 152}, },
			{{-1, ERROR, 258}, {58, SHIFT, 278}, {76, SHIFT, 256}, },
			{{-1, REDUCE, 131}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, REDUCE, 127}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, REDUCE, 88}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, ERROR, 262}, {54, SHIFT, 280}, },
			{{-1, REDUCE, 86}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 123}, },
			{{-1, ERROR, 267}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {58, SHIFT, 281}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 268}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 282}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, ERROR, 269}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 283}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 271}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 285}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, ERROR, 272}, {57, SHIFT, 287}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 37}, {27, SHIFT, 94}, {28, SHIFT, 95}, {33, SHIFT, 96}, {34, SHIFT, 97}, {38, SHIFT, 98}, {39, SHIFT, 99}, {43, SHIFT, 100}, {44, SHIFT, 101}, {45, SHIFT, 102}, {48, SHIFT, 103}, {49, SHIFT, 104}, {50, SHIFT, 105}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 276}, {76, SHIFT, 256}, },
			{{-1, ERROR, 277}, {60, SHIFT, 289}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 153}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 282}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {58, SHIFT, 290}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 283}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 291}, },
			{{-1, ERROR, 284}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 292}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, ERROR, 285}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {58, SHIFT, 293}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 286}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 294}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, ERROR, 287}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 295}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 132}, {53, SHIFT, 93}, {58, SHIFT, 297}, },
			{{-1, ERROR, 292}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 298}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 294}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {58, SHIFT, 299}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 40}, },
			{{-1, ERROR, 295}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 300}, },
			{{-1, ERROR, 296}, {0, SHIFT, 1}, {2, SHIFT, 2}, {6, SHIFT, 3}, {10, SHIFT, 4}, {20, SHIFT, 301}, {23, SHIFT, 8}, {63, SHIFT, 10}, {64, SHIFT, 11}, {76, SHIFT, 12}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 132}, {53, SHIFT, 93}, {58, SHIFT, 302}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 132}, {53, SHIFT, 93}, {58, SHIFT, 303}, },
			{{-1, ERROR, 301}, {27, SHIFT, 29}, {28, SHIFT, 30}, {34, SHIFT, 31}, {47, SHIFT, 32}, {53, SHIFT, 33}, {65, SHIFT, 34}, {66, SHIFT, 35}, {69, SHIFT, 36}, {73, SHIFT, 37}, {74, SHIFT, 38}, {75, SHIFT, 39}, {76, SHIFT, 304}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 132}, {53, SHIFT, 93}, {58, SHIFT, 305}, },
			{{-1, REDUCE, 15}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 13}, },
			{{-1, 14}, {27, 83}, },
			{{-1, 15}, },
			{{-1, 16}, },
			{{-1, 196}, },
			{{-1, 197}, {198, 243}, {240, 270}, },
			{{-1, 17}, },
			{{-1, 68}, {66, 143}, {144, 219}, },
			{{-1, 69}, },
			{{-1, 70}, },
			{{-1, 257}, {258, 279}, {276, 288}, },
			{{-1, 18}, },
			{{-1, 57}, {55, 121}, {122, 201}, },
			{{-1, 58}, {126, 205}, },
			{{-1, 59}, {126, 206}, },
			{{-1, 128}, {65, 141}, {67, 146}, {194, 239}, {195, 241}, {203, 245}, {242, 272}, {246, 273}, {256, 277}, },
			{{-1, 19}, {28, 85}, {84, 85}, {106, 177}, {180, 177}, {209, 177}, {268, 85}, {284, 85}, {286, 85}, {296, 85}, },
			{{-1, 20}, {4, 51}, {8, 62}, {115, 190}, {191, 235}, {192, 236}, {237, 266}, },
			{{-1, 21}, {181, 233}, },
			{{-1, 60}, {1, 41}, {4, 52}, {8, 63}, {33, 91}, {49, 116}, {64, 140}, {71, 149}, {72, 149}, {73, 153}, {74, 154}, {77, 155}, {78, 156}, {80, 160}, {92, 162}, {93, 164}, {117, 193}, {124, 202}, {131, 149}, {207, 248}, {222, 259}, {225, 260}, {226, 261}, {228, 263}, {247, 274}, },
			{{-1, 42}, },
			{{-1, 43}, },
			{{-1, 44}, },
			{{-1, 45}, },
			{{-1, 229}, {230, 265}, },
			{{-1, 46}, },
			{{-1, 262}, },
			{{-1, 47}, {29, 87}, {30, 88}, {31, 89}, {32, 90}, {94, 165}, {95, 166}, {96, 167}, {97, 168}, {98, 169}, {99, 170}, {100, 171}, {101, 172}, {102, 173}, {103, 174}, {104, 175}, {105, 176}, },
			{{-1, 182}, },
			{{-1, 107}, {53, 118}, {181, 234}, },
			{{-1, 178}, {209, 249}, },
			{{-1, 179}, {180, 232}, },
			{{-1, 22}, },
			{{-1, 64}, },
			{{-1, 134}, {136, 211}, {213, 211}, {215, 211}, {253, 211}, },
			{{-1, 135}, },
			{{-1, 53}, },
			{{-1, 23}, },
			{{-1, 24}, {79, 158}, },
			{{-1, 25}, },
			{{-1, -1}, },
			{{-1, 150}, {72, 152}, {131, 208}, },
			{{-1, 48}, {108, 183}, {109, 184}, {110, 185}, {111, 186}, {112, 187}, {113, 188}, {114, 189}, },
			{{-1, 26}, {79, 159}, },
			{{-1, 81}, },
			{{-1, 82}, },
			{{-1, 27}, },
			{{-1, 28}, {27, 84}, {238, 268}, {269, 284}, {271, 286}, {287, 296}, },
			{{-1, 198}, },
			{{-1, 144}, },
			{{-1, 258}, },
			{{-1, 122}, },
			{{-1, 230}, },
			{{-1, 180}, },
			{{-1, 136}, {138, 213}, {139, 215}, {216, 253}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'if', 'break', 'continue', 'for', 'func', 'var', 'return', 'switch', 'type', 'print', 'println', id, EOF",
			"expecting: '+', '-', '^', '!', '(', 'append', int, float64 literal, rune literal, raw string lit, interpreted string literal, id",
			"expecting: 'if', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', '}', 'print', 'println', id, EOF",
			"expecting: '+', '-', '^', '!', '(', ';', 'append', int, float64 literal, rune literal, raw string lit, interpreted string literal, id",
			"expecting: id",
			"expecting: '(', id",
			"expecting: '+', '-', '^', '!', '(', '{', 'append', int, float64 literal, rune literal, raw string lit, interpreted string literal, id",
			"expecting: type, '(', id",
			"expecting: '('",
			"expecting: op equals, '++', '--', '=', ':=', '[', ',', '.'",
			"expecting: EOF",
			"expecting: 'if', 'break', 'continue', 'for', 'return', 'switch', 'print', 'println', id, EOF",
			"expecting: 'if', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', '{', '}', ';', 'print', 'println', id, EOF",
			"expecting: op equals, '++', '--', '=', '[', ',', '.'",
			"expecting: '(', int, float64 literal, rune literal, raw string lit, interpreted string literal, id",
			"expecting: 'if', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', op equals, '+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^', '&&', '||', '++', '--', '==', '<', '>', '=', '!=', '<=', '>=', ')', '[', ']', '{', '}', ',', ';', ':', '.', 'print', 'println', id, EOF",
			"expecting: 'if', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', op equals, '+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^', '&&', '||', '++', '--', '==', '<', '>', '=', '!=', '<=', '>=', '(', ')', '[', ']', '{', '}', ',', ';', ':', '.', 'print', 'println', id, EOF",
			"expecting: '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', '{'",
			"expecting: 'if', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', op equals, '+', '-', '|', '^', '&&', '||', '++', '--', '==', '<', '>', '=', '!=', '<=', '>=', ')', '[', ']', '{', '}', ',', ';', ':', '.', 'print', 'println', id, EOF",
			"expecting: op equals, '+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^', '&&', '||', '++', '--', '==', '<', '>', '=', '!=', '<=', '>=', ':=', '(', '[', '{', ',', '.'",
			"expecting: ';'",
			"expecting: '{'",
			"expecting: ')', id",
			"expecting: type, '=', '[', ',', id",
			"expecting: 'if', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', '}', 'print', 'println', id, EOF",
			"expecting: 'case', 'default', '}'",
			"expecting: type, '[', id",
			"expecting: type, ')', id",
			"expecting: 'struct', type, '[', id",
			"expecting: 'if', 'break', 'continue', 'for', 'func', 'var', 'return', 'switch', type, 'type', ')', 'print', 'println', id, EOF",
			"expecting: '+', '-', '^', '!', '(', ')', 'append', int, float64 literal, rune literal, raw string lit, interpreted string literal, id",
			"expecting: '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', ')'",
			"expecting: 'if', 'break', 'continue', 'for', 'return', 'switch', '}', 'print', 'println', id",
			"expecting: 'if', 'else', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', '}', 'print', 'println', id, EOF",
			"expecting: '{', id",
			"expecting: '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', ';'",
			"expecting: '=', ')', '{', ';', id",
			"expecting: ']', int",
			"expecting: '=', ';'",
			"expecting: 'if', 'break', 'continue', 'for', 'func', 'var', 'return', 'switch', 'type', ')', 'print', 'println', id, EOF",
			"expecting: ':'",
			"expecting: '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', ')', ',', ':'",
			"expecting: ')', ','",
			"expecting: 'if', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', '{', '}', ';', 'print', 'println', id, EOF",
			"expecting: 'if', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', '{', '}', ',', ';', 'print', 'println', id, EOF",
			"expecting: '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', ']'",
			"expecting: '=', '[', ',', '.'",
			"expecting: ','",
			"expecting: op equals, '+', '-', '|', '^', '&&', '||', '++', '--', '==', '<', '>', '=', '!=', '<=', '>=', '[', ',', '.'",
			"expecting: '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', ','",
			"expecting: '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', ')', ','",
			"expecting: 'if', 'break', 'case', 'continue', 'default', 'for', 'return', 'switch', '}', 'print', 'println', id",
			"expecting: '}'",
			"expecting: 'if', '{'",
			"expecting: type, '[', '{', id",
			"expecting: type, '[', ',', id",
			"expecting: ')'",
			"expecting: '+', '-', '|', '^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', ',', ';'",
			"expecting: ']'",
			"expecting: ',', ':'",
			"expecting: '}', id",
			"expecting: 'if', 'break', 'continue', 'for', 'return', 'switch', 'print', 'println', id",
			"expecting: '+', '-', '^', '!', '(', '}', 'append', int, float64 literal, rune literal, raw string lit, interpreted string literal, id",
			"expecting: 'if', 'break', 'continue', 'for', 'return', 'switch', '+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^', '&&', '||', '==', '<', '>', '!=', '<=', '>=', '(', '}', 'print', 'println', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 1, 6, 7, 8, 8, 9, 10, 0, 0, 0, 0, 0, 11, 2, 2, 2, 12, 12, 12, 13, 0, 11, 14, 14, 14, 14, 1, 8, 15, 15, 15, 15, 15, 16, 17, 18, 18, 18, 18, 18, 15, 15, 3, 19, 20, 17, 21, 8, 22, 23, 0, 20, 20, 24, 25, 20, 17, 6, 26, 27, 28, 0, 20, 29, 30, 30, 1, 1, 12, 12, 1, 1, 4, 1, 13, 13, 0, 11, 11, 15, 15, 15, 15, 15, 31, 1, 30, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 32, 33, 14, 14, 14, 14, 14, 14, 14, 34, 35, 3, 2, 22, 20, 22, 22, 36, 1, 37, 4, 36, 38, 39, 39, 1, 40, 2, 25, 40, 25, 6, 25, 25, 17, 20, 20, 27, 27, 21, 20, 29, 2, 41, 42, 2, 42, 43, 43, 44, 45, 46, 47, 46, 48, 15, 49, 18, 50, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 51, 52, 51, 51, 53, 2, 15, 15, 15, 15, 15, 15, 15, 21, 34, 34, 35, 54, 55, 56, 22, 22, 0, 20, 22, 57, 26, 58, 20, 47, 1, 59, 51, 2, 25, 2, 25, 2, 25, 25, 0, 20, 27, 60, 2, 1, 2, 13, 1, 1, 18, 1, 42, 42, 33, 51, 2, 2, 21, 21, 34, 61, 21, 4, 22, 54, 22, 0, 36, 26, 1, 57, 25, 2, 2, 2, 25, 0, 29, 55, 60, 60, 41, 44, 31, 56, 50, 18, 42, 21, 62, 61, 61, 22, 61, 21, 36, 57, 2, 4, 20, 29, 60, 18, 0, 62, 1, 61, 62, 61, 61, 60, 60, 0, 63, 1, 0, 62, 1, 61, 0, 63, 0, 63, 1, 0, 0, 63, 0, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
