/* This file was generated by SableCC (http://www.sablecc.org/). */

package golite.analysis;

import java.util.*;
import golite.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAFuncDeclAstDecl(AFuncDeclAstDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclAstDecl(AFuncDeclAstDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclAstDecl(AFuncDeclAstDecl node)
    {
        inAFuncDeclAstDecl(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAFuncDeclAstDecl(node);
    }

    public void inAVarDeclAstDecl(AVarDeclAstDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDeclAstDecl(AVarDeclAstDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclAstDecl(AVarDeclAstDecl node)
    {
        inAVarDeclAstDecl(node);
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        outAVarDeclAstDecl(node);
    }

    public void inATypeDeclAstDecl(ATypeDeclAstDecl node)
    {
        defaultIn(node);
    }

    public void outATypeDeclAstDecl(ATypeDeclAstDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclAstDecl(ATypeDeclAstDecl node)
    {
        inATypeDeclAstDecl(node);
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        outATypeDeclAstDecl(node);
    }

    public void inANoReturnFuncDecl(ANoReturnFuncDecl node)
    {
        defaultIn(node);
    }

    public void outANoReturnFuncDecl(ANoReturnFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoReturnFuncDecl(ANoReturnFuncDecl node)
    {
        inANoReturnFuncDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outANoReturnFuncDecl(node);
    }

    public void inASingleReturnFuncDecl(ASingleReturnFuncDecl node)
    {
        defaultIn(node);
    }

    public void outASingleReturnFuncDecl(ASingleReturnFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleReturnFuncDecl(ASingleReturnFuncDecl node)
    {
        inASingleReturnFuncDecl(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outASingleReturnFuncDecl(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        outAFuncDecl(node);
    }

    public void inASingleIdToTypeSignature(ASingleIdToTypeSignature node)
    {
        defaultIn(node);
    }

    public void outASingleIdToTypeSignature(ASingleIdToTypeSignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleIdToTypeSignature(ASingleIdToTypeSignature node)
    {
        inASingleIdToTypeSignature(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        outASingleIdToTypeSignature(node);
    }

    public void inAManyIdToTypeSignature(AManyIdToTypeSignature node)
    {
        defaultIn(node);
    }

    public void outAManyIdToTypeSignature(AManyIdToTypeSignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyIdToTypeSignature(AManyIdToTypeSignature node)
    {
        inAManyIdToTypeSignature(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getSignature() != null)
        {
            node.getSignature().apply(this);
        }
        outAManyIdToTypeSignature(node);
    }

    public void inAMultipleTypesSignature(AMultipleTypesSignature node)
    {
        defaultIn(node);
    }

    public void outAMultipleTypesSignature(AMultipleTypesSignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleTypesSignature(AMultipleTypesSignature node)
    {
        inAMultipleTypesSignature(node);
        {
            List<PSignature> copy = new ArrayList<PSignature>(node.getSignature());
            for(PSignature e : copy)
            {
                e.apply(this);
            }
        }
        outAMultipleTypesSignature(node);
    }

    public void inATypeAliasTypeDecl(ATypeAliasTypeDecl node)
    {
        defaultIn(node);
    }

    public void outATypeAliasTypeDecl(ATypeAliasTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAliasTypeDecl(ATypeAliasTypeDecl node)
    {
        inATypeAliasTypeDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        outATypeAliasTypeDecl(node);
    }

    public void inATypeAliasBaseTypeDecl(ATypeAliasBaseTypeDecl node)
    {
        defaultIn(node);
    }

    public void outATypeAliasBaseTypeDecl(ATypeAliasBaseTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAliasBaseTypeDecl(ATypeAliasBaseTypeDecl node)
    {
        inATypeAliasBaseTypeDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        outATypeAliasBaseTypeDecl(node);
    }

    public void inATypeWithManyIdsTypeDecl(ATypeWithManyIdsTypeDecl node)
    {
        defaultIn(node);
    }

    public void outATypeWithManyIdsTypeDecl(ATypeWithManyIdsTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeWithManyIdsTypeDecl(ATypeWithManyIdsTypeDecl node)
    {
        inATypeWithManyIdsTypeDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeDecl() != null)
        {
            node.getTypeDecl().apply(this);
        }
        outATypeWithManyIdsTypeDecl(node);
    }

    public void inAStructWithIdTypeDecl(AStructWithIdTypeDecl node)
    {
        defaultIn(node);
    }

    public void outAStructWithIdTypeDecl(AStructWithIdTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructWithIdTypeDecl(AStructWithIdTypeDecl node)
    {
        inAStructWithIdTypeDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PTypeDecl> copy = new ArrayList<PTypeDecl>(node.getTypeDecl());
            for(PTypeDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAStructWithIdTypeDecl(node);
    }

    public void inAMultilineListTypeDecl(AMultilineListTypeDecl node)
    {
        defaultIn(node);
    }

    public void outAMultilineListTypeDecl(AMultilineListTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultilineListTypeDecl(AMultilineListTypeDecl node)
    {
        inAMultilineListTypeDecl(node);
        {
            List<PTypeDecl> copy = new ArrayList<PTypeDecl>(node.getTypeDecl());
            for(PTypeDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAMultilineListTypeDecl(node);
    }

    public void inAVarWithTypeVarDecl(AVarWithTypeVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarWithTypeVarDecl(AVarWithTypeVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarWithTypeVarDecl(AVarWithTypeVarDecl node)
    {
        inAVarWithTypeVarDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        outAVarWithTypeVarDecl(node);
    }

    public void inAVarWithOnlyExpVarDecl(AVarWithOnlyExpVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarWithOnlyExpVarDecl(AVarWithOnlyExpVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarWithOnlyExpVarDecl(AVarWithOnlyExpVarDecl node)
    {
        inAVarWithOnlyExpVarDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAVarWithOnlyExpVarDecl(node);
    }

    public void inAVarWithTypeAndExpVarDecl(AVarWithTypeAndExpVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarWithTypeAndExpVarDecl(AVarWithTypeAndExpVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarWithTypeAndExpVarDecl(AVarWithTypeAndExpVarDecl node)
    {
        inAVarWithTypeAndExpVarDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAVarWithTypeAndExpVarDecl(node);
    }

    public void inAInlineListNoExpVarDecl(AInlineListNoExpVarDecl node)
    {
        defaultIn(node);
    }

    public void outAInlineListNoExpVarDecl(AInlineListNoExpVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInlineListNoExpVarDecl(AInlineListNoExpVarDecl node)
    {
        inAInlineListNoExpVarDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        outAInlineListNoExpVarDecl(node);
    }

    public void inAInlineListWithExpVarDecl(AInlineListWithExpVarDecl node)
    {
        defaultIn(node);
    }

    public void outAInlineListWithExpVarDecl(AInlineListWithExpVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInlineListWithExpVarDecl(AInlineListWithExpVarDecl node)
    {
        inAInlineListWithExpVarDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAInlineListWithExpVarDecl(node);
    }

    public void inAMultilineListVarDecl(AMultilineListVarDecl node)
    {
        defaultIn(node);
    }

    public void outAMultilineListVarDecl(AMultilineListVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultilineListVarDecl(AMultilineListVarDecl node)
    {
        inAMultilineListVarDecl(node);
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAMultilineListVarDecl(node);
    }

    public void inABaseTypeVarType(ABaseTypeVarType node)
    {
        defaultIn(node);
    }

    public void outABaseTypeVarType(ABaseTypeVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseTypeVarType(ABaseTypeVarType node)
    {
        inABaseTypeVarType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outABaseTypeVarType(node);
    }

    public void inASliceVarType(ASliceVarType node)
    {
        defaultIn(node);
    }

    public void outASliceVarType(ASliceVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASliceVarType(ASliceVarType node)
    {
        inASliceVarType(node);
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        outASliceVarType(node);
    }

    public void inAArrayVarType(AArrayVarType node)
    {
        defaultIn(node);
    }

    public void outAArrayVarType(AArrayVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVarType(AArrayVarType node)
    {
        inAArrayVarType(node);
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        outAArrayVarType(node);
    }

    public void inAStructVarType(AStructVarType node)
    {
        defaultIn(node);
    }

    public void outAStructVarType(AStructVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructVarType(AStructVarType node)
    {
        inAStructVarType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAStructVarType(node);
    }

    public void inAReadStmt(AReadStmt node)
    {
        defaultIn(node);
    }

    public void outAReadStmt(AReadStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadStmt(AReadStmt node)
    {
        inAReadStmt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAReadStmt(node);
    }

    public void inAPrintStmt(APrintStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintStmt(APrintStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStmt(APrintStmt node)
    {
        inAPrintStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPrintStmt(node);
    }

    public void inAPrintlnStmt(APrintlnStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintlnStmt(APrintlnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnStmt(APrintlnStmt node)
    {
        inAPrintlnStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPrintlnStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inAIncrementStmt(AIncrementStmt node)
    {
        defaultIn(node);
    }

    public void outAIncrementStmt(AIncrementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrementStmt(AIncrementStmt node)
    {
        inAIncrementStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIncrementStmt(node);
    }

    public void inADecrementStmt(ADecrementStmt node)
    {
        defaultIn(node);
    }

    public void outADecrementStmt(ADecrementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecrementStmt(ADecrementStmt node)
    {
        inADecrementStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outADecrementStmt(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inAAssignOpStmt(AAssignOpStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignOpStmt(AAssignOpStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignOpStmt(AAssignOpStmt node)
    {
        inAAssignOpStmt(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getOpEquals() != null)
        {
            node.getOpEquals().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAssignOpStmt(node);
    }

    public void inAAssignListStmt(AAssignListStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignListStmt(AAssignListStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignListStmt(AAssignListStmt node)
    {
        inAAssignListStmt(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAssignListStmt(node);
    }

    public void inAShortDeclStmt(AShortDeclStmt node)
    {
        defaultIn(node);
    }

    public void outAShortDeclStmt(AShortDeclStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortDeclStmt(AShortDeclStmt node)
    {
        inAShortDeclStmt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAShortDeclStmt(node);
    }

    public void inAShortDeclListStmt(AShortDeclListStmt node)
    {
        defaultIn(node);
    }

    public void outAShortDeclListStmt(AShortDeclListStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortDeclListStmt(AShortDeclListStmt node)
    {
        inAShortDeclListStmt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAShortDeclListStmt(node);
    }

    public void inABlockStmt(ABlockStmt node)
    {
        defaultIn(node);
    }

    public void outABlockStmt(ABlockStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        inABlockStmt(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outABlockStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAWhileStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAElseifStmt(AElseifStmt node)
    {
        defaultIn(node);
    }

    public void outAElseifStmt(AElseifStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseifStmt(AElseifStmt node)
    {
        inAElseifStmt(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAElseifStmt(node);
    }

    public void inAElseStmt(AElseStmt node)
    {
        defaultIn(node);
    }

    public void outAElseStmt(AElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStmt(AElseStmt node)
    {
        inAElseStmt(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAElseStmt(node);
    }

    public void inAForStmt(AForStmt node)
    {
        defaultIn(node);
    }

    public void outAForStmt(AForStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmt(AForStmt node)
    {
        inAForStmt(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAForStmt(node);
    }

    public void inABreakStmt(ABreakStmt node)
    {
        defaultIn(node);
    }

    public void outABreakStmt(ABreakStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStmt(ABreakStmt node)
    {
        inABreakStmt(node);
        outABreakStmt(node);
    }

    public void inAContinueStmt(AContinueStmt node)
    {
        defaultIn(node);
    }

    public void outAContinueStmt(AContinueStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStmt(AContinueStmt node)
    {
        inAContinueStmt(node);
        outAContinueStmt(node);
    }

    public void inAEmptyStmt(AEmptyStmt node)
    {
        defaultIn(node);
    }

    public void outAEmptyStmt(AEmptyStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStmt(AEmptyStmt node)
    {
        inAEmptyStmt(node);
        outAEmptyStmt(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMinusExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivideExp(ADivideExp node)
    {
        defaultIn(node);
    }

    public void outADivideExp(ADivideExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideExp(ADivideExp node)
    {
        inADivideExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADivideExp(node);
    }

    public void inAModuloExp(AModuloExp node)
    {
        defaultIn(node);
    }

    public void outAModuloExp(AModuloExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloExp(AModuloExp node)
    {
        inAModuloExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAModuloExp(node);
    }

    public void inAAmpersandExp(AAmpersandExp node)
    {
        defaultIn(node);
    }

    public void outAAmpersandExp(AAmpersandExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpersandExp(AAmpersandExp node)
    {
        inAAmpersandExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAmpersandExp(node);
    }

    public void inAAmpersandCaretExp(AAmpersandCaretExp node)
    {
        defaultIn(node);
    }

    public void outAAmpersandCaretExp(AAmpersandCaretExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpersandCaretExp(AAmpersandCaretExp node)
    {
        inAAmpersandCaretExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAmpersandCaretExp(node);
    }

    public void inAShiftLeftExp(AShiftLeftExp node)
    {
        defaultIn(node);
    }

    public void outAShiftLeftExp(AShiftLeftExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShiftLeftExp(AShiftLeftExp node)
    {
        inAShiftLeftExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAShiftLeftExp(node);
    }

    public void inAShiftRightExp(AShiftRightExp node)
    {
        defaultIn(node);
    }

    public void outAShiftRightExp(AShiftRightExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShiftRightExp(AShiftRightExp node)
    {
        inAShiftRightExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAShiftRightExp(node);
    }

    public void inALogicalOrExp(ALogicalOrExp node)
    {
        defaultIn(node);
    }

    public void outALogicalOrExp(ALogicalOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOrExp(ALogicalOrExp node)
    {
        inALogicalOrExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outALogicalOrExp(node);
    }

    public void inALogicalAndExp(ALogicalAndExp node)
    {
        defaultIn(node);
    }

    public void outALogicalAndExp(ALogicalAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalAndExp(ALogicalAndExp node)
    {
        inALogicalAndExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outALogicalAndExp(node);
    }

    public void inAEqualsEqualsExp(AEqualsEqualsExp node)
    {
        defaultIn(node);
    }

    public void outAEqualsEqualsExp(AEqualsEqualsExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsEqualsExp(AEqualsEqualsExp node)
    {
        inAEqualsEqualsExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAEqualsEqualsExp(node);
    }

    public void inANotEqualExp(ANotEqualExp node)
    {
        defaultIn(node);
    }

    public void outANotEqualExp(ANotEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualExp(ANotEqualExp node)
    {
        inANotEqualExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outANotEqualExp(node);
    }

    public void inALessExp(ALessExp node)
    {
        defaultIn(node);
    }

    public void outALessExp(ALessExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessExp(ALessExp node)
    {
        inALessExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outALessExp(node);
    }

    public void inALessEqualsExp(ALessEqualsExp node)
    {
        defaultIn(node);
    }

    public void outALessEqualsExp(ALessEqualsExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualsExp(ALessEqualsExp node)
    {
        inALessEqualsExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outALessEqualsExp(node);
    }

    public void inAGreaterEqualsExp(AGreaterEqualsExp node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualsExp(AGreaterEqualsExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualsExp(AGreaterEqualsExp node)
    {
        inAGreaterEqualsExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAGreaterEqualsExp(node);
    }

    public void inAGreaterExp(AGreaterExp node)
    {
        defaultIn(node);
    }

    public void outAGreaterExp(AGreaterExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterExp(AGreaterExp node)
    {
        inAGreaterExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAGreaterExp(node);
    }

    public void inAPipeExp(APipeExp node)
    {
        defaultIn(node);
    }

    public void outAPipeExp(APipeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPipeExp(APipeExp node)
    {
        inAPipeExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAPipeExp(node);
    }

    public void inACaretExp(ACaretExp node)
    {
        defaultIn(node);
    }

    public void outACaretExp(ACaretExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretExp(ACaretExp node)
    {
        inACaretExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outACaretExp(node);
    }

    public void inAIdExp(AIdExp node)
    {
        defaultIn(node);
    }

    public void outAIdExp(AIdExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExp(AIdExp node)
    {
        inAIdExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExp(node);
    }

    public void inAFloat64LiteralExp(AFloat64LiteralExp node)
    {
        defaultIn(node);
    }

    public void outAFloat64LiteralExp(AFloat64LiteralExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloat64LiteralExp(AFloat64LiteralExp node)
    {
        inAFloat64LiteralExp(node);
        if(node.getFloat64Literal() != null)
        {
            node.getFloat64Literal().apply(this);
        }
        outAFloat64LiteralExp(node);
    }

    public void inAIntExp(AIntExp node)
    {
        defaultIn(node);
    }

    public void outAIntExp(AIntExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExp(AIntExp node)
    {
        inAIntExp(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntExp(node);
    }

    public void inAUnaryPlusExp(AUnaryPlusExp node)
    {
        defaultIn(node);
    }

    public void outAUnaryPlusExp(AUnaryPlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryPlusExp(AUnaryPlusExp node)
    {
        inAUnaryPlusExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAUnaryPlusExp(node);
    }

    public void inAUnaryMinusExp(AUnaryMinusExp node)
    {
        defaultIn(node);
    }

    public void outAUnaryMinusExp(AUnaryMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryMinusExp(AUnaryMinusExp node)
    {
        inAUnaryMinusExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAUnaryMinusExp(node);
    }

    public void inAUnaryXorExp(AUnaryXorExp node)
    {
        defaultIn(node);
    }

    public void outAUnaryXorExp(AUnaryXorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryXorExp(AUnaryXorExp node)
    {
        inAUnaryXorExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAUnaryXorExp(node);
    }

    public void inAUnaryExclamationExp(AUnaryExclamationExp node)
    {
        defaultIn(node);
    }

    public void outAUnaryExclamationExp(AUnaryExclamationExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryExclamationExp(AUnaryExclamationExp node)
    {
        inAUnaryExclamationExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAUnaryExclamationExp(node);
    }

    public void inARuneLiteralExp(ARuneLiteralExp node)
    {
        defaultIn(node);
    }

    public void outARuneLiteralExp(ARuneLiteralExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARuneLiteralExp(ARuneLiteralExp node)
    {
        inARuneLiteralExp(node);
        if(node.getRuneLiteral() != null)
        {
            node.getRuneLiteral().apply(this);
        }
        outARuneLiteralExp(node);
    }

    public void inARawStringLitExp(ARawStringLitExp node)
    {
        defaultIn(node);
    }

    public void outARawStringLitExp(ARawStringLitExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARawStringLitExp(ARawStringLitExp node)
    {
        inARawStringLitExp(node);
        if(node.getRawStringLit() != null)
        {
            node.getRawStringLit().apply(this);
        }
        outARawStringLitExp(node);
    }

    public void inAInterpretedStringLiteralExp(AInterpretedStringLiteralExp node)
    {
        defaultIn(node);
    }

    public void outAInterpretedStringLiteralExp(AInterpretedStringLiteralExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterpretedStringLiteralExp(AInterpretedStringLiteralExp node)
    {
        inAInterpretedStringLiteralExp(node);
        if(node.getInterpretedStringLiteral() != null)
        {
            node.getInterpretedStringLiteral().apply(this);
        }
        outAInterpretedStringLiteralExp(node);
    }

    public void inAFunctionCallExp(AFunctionCallExp node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallExp(AFunctionCallExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallExp(AFunctionCallExp node)
    {
        inAFunctionCallExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCallExp(node);
    }

    public void inAAppendedExprExp(AAppendedExprExp node)
    {
        defaultIn(node);
    }

    public void outAAppendedExprExp(AAppendedExprExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppendedExprExp(AAppendedExprExp node)
    {
        inAAppendedExprExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAppendedExprExp(node);
    }

    public void inAArrayIndexExp(AArrayIndexExp node)
    {
        defaultIn(node);
    }

    public void outAArrayIndexExp(AArrayIndexExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayIndexExp(AArrayIndexExp node)
    {
        inAArrayIndexExp(node);
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        outAArrayIndexExp(node);
    }

    public void inAStructSelectorExp(AStructSelectorExp node)
    {
        defaultIn(node);
    }

    public void outAStructSelectorExp(AStructSelectorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructSelectorExp(AStructSelectorExp node)
    {
        inAStructSelectorExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAStructSelectorExp(node);
    }

    public void inAListExp(AListExp node)
    {
        defaultIn(node);
    }

    public void outAListExp(AListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExp(AListExp node)
    {
        inAListExp(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAListExp(node);
    }

    public void inAForCondExp(AForCondExp node)
    {
        defaultIn(node);
    }

    public void outAForCondExp(AForCondExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForCondExp(AForCondExp node)
    {
        inAForCondExp(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getThird() != null)
        {
            node.getThird().apply(this);
        }
        outAForCondExp(node);
    }
}
