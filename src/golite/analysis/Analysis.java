/* This file was generated by SableCC (http://www.sablecc.org/). */

package golite.analysis;

import golite.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAVarDeclAstDecl(AVarDeclAstDecl node);
    void caseATypeDecl(ATypeDecl node);
    void caseAVarWithTypeVarDecl(AVarWithTypeVarDecl node);
    void caseAVarWithOnlyExpVarDecl(AVarWithOnlyExpVarDecl node);
    void caseAVarWithTypeAndExpVarDecl(AVarWithTypeAndExpVarDecl node);
    void caseAInlineListNoExpVarDecl(AInlineListNoExpVarDecl node);
    void caseAInlineListWithExpVarDecl(AInlineListWithExpVarDecl node);
    void caseAMultilineListVarDecl(AMultilineListVarDecl node);
    void caseABaseTypeVarType(ABaseTypeVarType node);
    void caseASliceVarType(ASliceVarType node);
    void caseAArrayVarType(AArrayVarType node);
    void caseAStructVarType(AStructVarType node);
    void caseAReadStmt(AReadStmt node);
    void caseAPrintStmt(APrintStmt node);
    void caseAAssignStmt(AAssignStmt node);
    void caseAWhileStmt(AWhileStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAElseStmt(AElseStmt node);
    void caseAEmptyStmt(AEmptyStmt node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseAMultExp(AMultExp node);
    void caseADivideExp(ADivideExp node);
    void caseAUminusExp(AUminusExp node);
    void caseAIdExp(AIdExp node);
    void caseAFloatExp(AFloatExp node);
    void caseAIntExp(AIntExp node);

    void caseTBreak(TBreak node);
    void caseTCase(TCase node);
    void caseTChan(TChan node);
    void caseTConst(TConst node);
    void caseTContinue(TContinue node);
    void caseTDefault(TDefault node);
    void caseTDefer(TDefer node);
    void caseTFallthrough(TFallthrough node);
    void caseTFor(TFor node);
    void caseTFunc(TFunc node);
    void caseTGo(TGo node);
    void caseTGoto(TGoto node);
    void caseTVar(TVar node);
    void caseTImport(TImport node);
    void caseTInterface(TInterface node);
    void caseTMap(TMap node);
    void caseTPackage(TPackage node);
    void caseTRange(TRange node);
    void caseTReturn(TReturn node);
    void caseTSelect(TSelect node);
    void caseTStruct(TStruct node);
    void caseTSwitch(TSwitch node);
    void caseTType(TType node);
    void caseTTypeKeyword(TTypeKeyword node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTModulo(TModulo node);
    void caseTAmpersand(TAmpersand node);
    void caseTPipe(TPipe node);
    void caseTCaret(TCaret node);
    void caseTShiftLeft(TShiftLeft node);
    void caseTShiftRight(TShiftRight node);
    void caseTAmpersandCaret(TAmpersandCaret node);
    void caseTPlusEquals(TPlusEquals node);
    void caseTMinusEquals(TMinusEquals node);
    void caseTTimesEquals(TTimesEquals node);
    void caseTSlashEquals(TSlashEquals node);
    void caseTModuloEquals(TModuloEquals node);
    void caseTAmpersandEquals(TAmpersandEquals node);
    void caseTPipeEquals(TPipeEquals node);
    void caseTCaretEquals(TCaretEquals node);
    void caseTShiftLeftEquals(TShiftLeftEquals node);
    void caseTShiftRightEquals(TShiftRightEquals node);
    void caseTAmpersandCaretEquals(TAmpersandCaretEquals node);
    void caseTLogicalAnd(TLogicalAnd node);
    void caseTLogicalOr(TLogicalOr node);
    void caseTLeftArrow(TLeftArrow node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTEqualsEquals(TEqualsEquals node);
    void caseTLess(TLess node);
    void caseTGreater(TGreater node);
    void caseTEquals(TEquals node);
    void caseTExclamation(TExclamation node);
    void caseTExclamationEquals(TExclamationEquals node);
    void caseTLessEquals(TLessEquals node);
    void caseTGreaterEquals(TGreaterEquals node);
    void caseTColonEquals(TColonEquals node);
    void caseTDotDotDot(TDotDotDot node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBrack(TLBrack node);
    void caseTRBrack(TRBrack node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTDot(TDot node);
    void caseTPrint(TPrint node);
    void caseTPrintln(TPrintln node);
    void caseTAppend(TAppend node);
    void caseTComment(TComment node);
    void caseTBlockComment(TBlockComment node);
    void caseTInt(TInt node);
    void caseTOct(TOct node);
    void caseTHex(THex node);
    void caseTFloat(TFloat node);
    void caseTFloat64(TFloat64 node);
    void caseTBool(TBool node);
    void caseTRune(TRune node);
    void caseTRuneLiteral(TRuneLiteral node);
    void caseTRawStringLit(TRawStringLit node);
    void caseTInterpretedStringLiteral(TInterpretedStringLiteral node);
    void caseTId(TId node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTEol(TEol node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
