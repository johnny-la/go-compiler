Package golite;

Helpers
  all_chars = [0..0xffff];
  all_chars_but_linefeed = [all_chars-10];
  all_chars_but_star_slash = [[all_chars-'*']-'/'];
  star_without_slash = '*' [all_chars - '/'];
  tab = 9;
  line_feed = 10;
  carriage_return = 13;
  space = ' ';
  digit = ['0'..'9'];
  positive_digit = ['1'..'9'];
  integer = '0' | (positive_digit digit*);
  float_decimal = '.' digit*;
  letter = ['a'..'z'] | ['A'..'Z'];
  string_symbols = letter | digit | ':' | ':' | '~' | '#' | '$' | '%' | '^' | '&' | '*' | '-' | '+' | '/' | '`' | ''' | '<' | '>' | '=' | '_' | '|' | ';' | ':' | '{' | '}' | '[' | ']' | '(' | ')' | space | '@' | '!' | '?' | '.' | ',';
  escape_single_quote = '\' ''';
  escape_double_quote = '\"';
  escape_sequences = '\a' | '\b' | '\f' | '\n' | '\r' | '\t' | '\v' | '\\' | escape_single_quote;
  oct_digit = ['0' .. '7'] ;
  hex_digit = digit | ['A' .. 'F'] | ['a' .. 'f'] ;
  single_quote = ''' ;
  double_quote = '"' ;
  back_quote = '`' ;
  not_end_of_line = [all_chars - [carriage_return + line_feed]] ;

Tokens
  if = 'if';
  else = 'else';
  break = 'break';
  case = 'case';
  chan = 'chan';
  const = 'const';
  continue = 'continue';
  default = 'default';
  defer = 'defer';
  fallthrough = 'fallthrough';
  for = 'for';
  func = 'func';
  go = 'go';
  goto = 'goto';
  var = 'var';
  import = 'import';
  interface = 'interface';
  map = 'map';
  package = 'package';
  range = 'range';
  return = 'return';
  select = 'select';
  struct = 'struct';
  switch = 'switch';
  op_equals = ('+' | '&' | '&^' | '-' | '|' | '<' | '*' | '^' | '/' | '<<' | '%' | '>>')
 '=';
  type = 'float64'|'rune'|'int'|'bool'|'string';
  type_keyword = 'type';
  plus = '+';
  minus = '-';
  star = '*';
  slash = '/';
  modulo = '%';
  ampersand = '&';
  pipe = '|';
  caret = '^';
  shift_left = '<<';
  shift_right = '>>';
  ampersand_caret = '&^';
  logical_and = '&&';
  logical_or = '||';
  left_arrow = '<-';
  plus_plus = '++';
  minus_minus = '--';
  equals_equals = '==';
  less = '<';
  greater = '>';
  equals = '=';
  exclamation = '!';
  exclamation_equals = '!=';
  less_equals = '<=';
  greater_equals = '>=';
  colon_equals = ':=';
  dot_dot_dot = '...';
  l_paren = '(';
  r_paren = ')';
  l_brack = '[';
  r_brack = ']';
  l_brace = '{';
  r_brace = '}';
  comma = ',';
  semicolon = ';';
  colon = ':';
  dot = '.';
  print = 'print';
  println = 'println';
  append = 'append';
  comment = '//' all_chars_but_linefeed*;
  block_comment = '/*' (all_chars_but_star_slash | '/*' | star_without_slash)* '*/';
  int = integer;
  oct = '0' oct_digit+ ;
  hex = '0' ['x' + 'X'] hex_digit+;
  float64_literal = digit* '.' digit* | '.' digit+ ;
  float64 = 'float64';
  bool = 'bool';
  rune = 'rune';
  rune_literal = single_quote ([not_end_of_line - [single_quote + '\']] | escape_single_quote | escape_sequences) single_quote ;
  raw_string_lit = back_quote [all_chars - back_quote]* back_quote ;
  interpreted_string_literal = double_quote ([not_end_of_line - [double_quote + '\']] | escape_double_quote| escape_sequences)* double_quote ;
  id = (letter | '_')(letter | digit | '_')*;
  eol = line_feed | carriage_return | carriage_return line_feed;
  blank = tab | space;

Ignored Tokens
  eol, blank, comment, block_comment;

Productions
cst_prog {-> program} =
  {prog}    cst_top_decl* cst_stmt*   {-> New program([cst_top_decl.decl], [cst_stmt.stmt])}; 


cst_top_decl {-> decl} =
  {var_decl} cst_var_decl {-> New decl.var_decl_ast(cst_var_decl.var_decl)} 
  ;

cst_var_decl {-> var_decl} =
  {cst_single_line_decl} var top_var_decl {-> top_var_decl.var_decl} |
  {cst_multi_line_decl} var l_paren top_var_decl* r_paren semicolon {-> New var_decl.multiline_list([top_var_decl.var_decl])}
  ;

top_var_decl {-> var_decl} = 
  {cst_miat} id_and_type semicolon {-> id_and_type.var_decl} |
  {cst_miae} id_and_exp_maybe_type semicolon {-> id_and_exp_maybe_type.var_decl}
  ;

id_and_type {-> var_decl} = 
  {miat_recurse} id comma id_and_type {-> New var_decl.inline_list_no_exp(id, id_and_type.var_decl)} |
  {miat_end} id cst_type {-> New var_decl.var_with_type(id, cst_type.var_type)}
  ;

id_and_exp_maybe_type {-> var_decl} = 
  {miae_recurse} id [l]:comma id_and_exp_maybe_type [r]:comma cst_exp {-> New var_decl.inline_list_with_exp(id, id_and_exp_maybe_type.var_decl, cst_exp.exp)} |
  {miae_end} id equals cst_exp {-> New var_decl.var_with_only_exp(id, cst_exp.exp)} |
  {mtae_end} id cst_type equals cst_exp {-> New var_decl.var_with_type_and_exp(id, cst_type.var_type, cst_exp.exp)};

//structs is just an id when declaring since no inline constructions
cst_type {-> var_type} = 
  {cst_base_type} type {-> New var_type.base_type(type)}|
  {cst_slices} l_brack r_brack cst_type {-> New var_type.slice(cst_type.var_type)} | 
  {cst_arrays} l_brack int r_brack cst_type {-> New var_type.array(cst_type.var_type)}|
  {cst_structs} id {-> New var_type.struct(id)}
  ;

cst_stmt {-> stmt} =
  {cst_simple}     cst_simple_stmt     {-> cst_simple_stmt.stmt} |
  {cst_print}      print l_paren cst_exp_list? r_paren {-> New stmt.print(cst_exp_list.exp)} |
  {cst_println}    println l_paren cst_exp_list? r_paren {-> New stmt.println(cst_exp_list.exp)} |
  {cst_return}     return cst_exp  {-> New stmt.return(cst_exp.exp)} |
  {cst_if}         cst_if_stmt     {-> cst_if_stmt.stmt} |
  {cst_switch}     cst_switch_stmt {-> cst_switch_stmt.stmt} |
  {cst_for}        for cst_for_condition cst_block {-> New stmt.for(cst_for_condition.exp, cst_block.stmt)} |
  {cst_break}      break           {-> New stmt.break()} |
  {cst_continue}   continue        {-> New stmt.continue()};

cst_simple_stmt {-> stmt} =
  //{cst_empty}      /*empty*/           {-> New stmt.empty()} |
  //{cst_decl}       cst_top_decl        {-> New stmt.decl(cst_top_decl.decl)} |
  {cst_increment}  lvalue plus_plus    {-> New stmt.increment(lvalue.exp)} |
  {cst_decrement}  lvalue minus_minus  {-> New stmt.decrement(lvalue.exp)} |
  {cst_assign}     cst_assign_stmt     {-> cst_assign_stmt.stmt} |
  {cst_short_decl} cst_short_decl_stmt {-> cst_short_decl_stmt.stmt};

cst_if_stmt {-> stmt} = 
  {cst_if} if cst_exp cst_block cst_end_if? {-> New stmt.if(cst_exp.exp, cst_block.stmt, cst_end_if.stmt)};

cst_end_if {-> stmt} =
  {cst_else_if} else cst_if_stmt {-> New stmt.elseif(cst_if_stmt.stmt)} |
  {cst_else}    else cst_block   {-> New stmt.else(cst_block.stmt)};

cst_block {-> stmt} =
  {cst_block} l_brace cst_stmt_list r_brace {-> New stmt.block([cst_stmt_list.stmt])};

cst_stmt_list {-> stmt*} =
  {cst_stmt_list} cst_stmt_eos* {-> [cst_stmt_eos.stmt]};

cst_stmt_eos {-> stmt} =    
  {cst_stmt_eos}  cst_stmt {-> cst_stmt.stmt}; // Add eos

cst_switch_stmt {-> stmt} =
  {cst_switch} switch cst_simple_stmt_eol? cst_exp? l_brace cst_switch_case_clause* r_brace {-> New stmt.empty()};

cst_simple_stmt_eol {-> stmt} =
  {cst_simple_eol} cst_simple_stmt semicolon {-> cst_simple_stmt.stmt};

cst_switch_case_clause {-> stmt} =
  {cst_case_clause} cst_switch_case colon cst_stmt_list {-> New stmt.empty()};

cst_switch_case {-> stmt} =
  {cst_case}   case cst_exp_list {-> New stmt.empty()} |
  {cst_switch} default {-> New stmt.empty()}; 

cst_for_condition {-> exp} =
  {cst_exp}      cst_exp {-> cst_exp.exp} |
  {cst_clause}   [l]:cst_simple_stmt? [sl]:semicolon cst_exp? [sr]:semicolon [r]:cst_simple_stmt? {-> New exp.for_cond(l.stmt, cst_exp.exp, r.stmt)};

cst_assign_stmt {-> stmt} =
  {cst_assign_stmt} lvalue op_equals cst_exp {-> New stmt.assign_op(lvalue.exp,op_equals,cst_exp.exp)} |
  {cst_assign_op_stmt} cst_assign_op_stmt {-> cst_assign_op_stmt.stmt};

cst_assign_op_stmt {-> stmt} =
  {lvalue_assign} lvalue equals cst_exp {-> New stmt.assign(lvalue.exp, cst_exp.exp)} |
  {lvalue_assign_list} lvalue [l]:comma cst_assign_op_stmt [r]:comma cst_exp {-> New stmt.assign_list(lvalue.exp, cst_assign_op_stmt.stmt, cst_exp.exp)};

cst_short_decl_stmt {-> stmt} =
  {cst_short_decl} id colon_equals cst_exp {-> New stmt.short_decl(id, cst_exp.exp)};
  //{cst_short_decl_list} cst_id_comma cst_short_decl_stmt [r]:comma cst_exp {-> New stmt.short_decl_list(cst_id_comma.id, cst_short_decl_stmt.stmt, cst_exp.exp)};

cst_id_comma {-> id} =
  {cst_id_comman} id comma {-> id};

cst_exp_list {-> exp} =
  {cst_exp}      cst_exp     {-> cst_exp.exp} |
  {cst_exp_list} cst_exp_list comma cst_exp {-> New exp.list(cst_exp_list.exp, cst_exp.exp)};
    
cst_exp {-> exp} =
  {cst_plus}   cst_exp plus factor  {-> New exp.plus(cst_exp.exp,factor.exp)} |
  {cst_minus}  cst_exp minus factor {-> New exp.minus(cst_exp.exp,factor.exp)} | 
  {factor}     factor {-> factor.exp} |
  {unary_op}   unary_op {-> unary_op.exp};

unary_op {-> exp} = 
  {positive_expression} plus factor { -> New exp.unary_plus(factor.exp)} |
  {negative_expression} minus factor {-> New exp.unary_minus(factor.exp)} |
  {caret_expression} caret factor {-> New exp.unary_xor(factor.exp)} |
  {exclamation_exoression} exclamation factor {-> New exp.unary_exclamation(factor.exp)};

factor {-> exp} = 
  {cst_times}      factor star term  {-> New exp.mult(factor.exp,term.exp)} |
  {cst_divide}     factor slash term {-> New exp.divide(factor.exp,term.exp)} |
  {term}           term              {-> term.exp};

term {-> exp} =
  {cst_id}        id     {-> New exp.id(id)} |
  {cst_float64}     float64_literal  {-> New exp.float64_literal(float64_literal)} |
  {cst_int}       int    {-> New exp.int(int)} |
  {cst_rune_literal} rune_literal {-> New exp.rune_literal(rune_literal)} |
  {cst_raw_string_lit} raw_string_lit {-> New exp.raw_string_lit(raw_string_lit)} |
  {cst_interpreted_string_literal} interpreted_string_literal {-> New exp.interpreted_string_literal(interpreted_string_literal)} |
  {paren}         l_paren cst_exp r_paren  {-> cst_exp.exp};

lvalue {-> exp} =
  {cst_id}      id     {-> New exp.id(id)} |
  {array_index} lvalue cst_index {-> New exp.array_index(lvalue.exp, cst_index.exp)} |
  {struct_selector}  lvalue cst_selector  {-> New exp.struct_selector(lvalue.exp, cst_selector.exp)};

cst_index {-> exp} =
  {cst_index} l_brack cst_exp r_brack {-> cst_exp.exp};

cst_selector {-> exp} =
  {cst_selector} dot cst_exp {-> cst_exp.exp};

Abstract Syntax Tree

program = decl* stmt*;

decl = 
  {var_decl_ast} var_decl
  ;

type_decl = 
  ;

var_decl = 
  {var_with_type} id var_type |
  {var_with_only_exp} id exp |
  {var_with_type_and_exp} id var_type exp |
  {inline_list_no_exp} id var_decl |
  {inline_list_with_exp} id var_decl exp |
  {multiline_list} var_decl*
  ;

var_type = 
  {base_type} type |
  {slice} var_type |
  {array} var_type |
  {struct} id
  ;

stmt =
  {read}            id |
  {print}           exp? |
  {println}         exp? |
  {return}          exp |
  {increment}       exp |
  {decrement}       exp |
  {decl}            decl |
  {assign}          [l]:exp [r]:exp |
  {assign_op}       [l]:exp op_equals [r]:exp |
  {assign_list}     [l]:exp stmt [r]:exp |
  {short_decl}      id exp |
  {short_decl_list} id stmt exp |
  {block}           stmt* |
  {while}           exp stmt* |
  {if}              exp [block]:stmt [end]:stmt?  |
  {elseif}          stmt |
  {else}            stmt |
  {for}             [condition]:exp [block]:stmt |
  {break}    |
  {continue} | 
  {empty};

exp =
  {plus}   [l]:exp [r]:exp |
  {minus}  [l]:exp [r]:exp |
  {mult}   [l]:exp [r]:exp |
  {divide} [l]:exp [r]:exp |
  {id} id |
  {float64_literal} float64_literal |
  {int} int |
  {unary_plus} exp |
  {unary_minus} exp |
  {unary_xor} exp |
  {unary_exclamation} exp |
  {rune_literal} rune_literal |
  {raw_string_lit} raw_string_lit |
  {interpreted_string_literal} interpreted_string_literal |
  {array_index}      [lvalue]:exp [index]:exp |
  {struct_selector}  [l]:exp [r]:exp |
  {list}      [list]:exp [value]:exp |
  {for_cond}  [first]:stmt? [second]:exp? [third]:stmt?;
