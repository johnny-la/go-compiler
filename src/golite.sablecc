Package golite;

Helpers
  all_chars = [0..0xffff];
  all_chars_but_linefeed = [all_chars-10];
  all_chars_but_star_slash = [[all_chars-'*']-'/'];
  star_without_slash = '*' [all_chars - '/'];
  tab = 9;
  line_feed = 10;
  carriage_return = 13;
  space = ' ';
  digit = ['0'..'9'];
  positive_digit = ['1'..'9'];
  integer = '0' | (positive_digit digit*);
  float_decimal = '.' digit*;
  letter = ['a'..'z'] | ['A'..'Z'];
  string_symbols = letter | digit | ':' | ':' | '~' | '#' | '$' | '%' | '^' | '&' | '*' | '-' | '+' | '/' | '`' | ''' | '<' | '>' | '=' | '_' | '|' | ';' | ':' | '{' | '}' | '[' | ']' | '(' | ')' | space | '@' | '!' | '?' | '.' | ',';
  escape_single_quote = '\' ''';
  escape_double_quote = '\"';
  escape_sequences = '\a' | '\b' | '\f' | '\n' | '\r' | '\t' | '\v' | '\\' | escape_single_quote;
  oct_digit = ['0' .. '7'] ;
  hex_digit = digit | ['A' .. 'F'] | ['a' .. 'f'] ;
  single_quote = ''' ;
  double_quote = '"' ;
  back_quote = '`' ;
  not_end_of_line = [all_chars - [carriage_return + line_feed]] ;

Tokens
  break = 'break';
  case = 'case';
  chan = 'chan';
  const = 'const';
  continue = 'continue';
  default = 'default';
  defer = 'defer';
  fallthrough = 'fallthrough';
  for = 'for';
  func = 'func';
  go = 'go';
  goto = 'goto';
  var = 'var';
  import = 'import';
  interface = 'interface';
  map = 'map';
  package = 'package';
  range = 'range';
  return = 'return';
  select = 'select';
  struct = 'struct';
  switch = 'switch';
  type = 'float64'|'rune'|'int'|'bool'|'string';
  type_keyword = 'type';
  plus = '+';
  minus = '-';
  star = '*';
  slash = '/';
  modulo = '%';
  ampersand = '&';
  pipe = '|';
  caret = '^';
  shift_left = '<<';
  shift_right = '>>';
  ampersand_caret = '&^';
  plus_equals = '+=';
  minus_equals = '-=';
  times_equals = '*=';
  slash_equals = '/=';
  modulo_equals = '%=';
  ampersand_equals = '&=';
  pipe_equals = '|=';
  caret_equals = '^=';
  shift_left_equals = '<<=';
  shift_right_equals = '>>=';
  ampersand_caret_equals = '&^=';
  logical_and = '&&';
  logical_or = '||';
  left_arrow = '<-';
  plus_plus = '++';
  minus_minus = '--';
  equals_equals = '==';
  less = '<';
  greater = '>';
  equals = '=';
  exclamation = '!';
  exclamation_equals = '!=';
  less_equals = '<=';
  greater_equals = '>=';
  colon_equals = ':=';
  dot_dot_dot = '...';
  l_paren = '(';
  r_paren = ')';
  l_brack = '[';
  r_brack = ']';
  l_brace = '{';
  r_brace = '}';
  comma = ',';
  semicolon = ';';
  colon = ':';
  dot = '.';
  print = 'print';
  println = 'println';
  append = 'append';
  comment = '//' all_chars_but_linefeed*;
  block_comment = '/*' (all_chars_but_star_slash | '/*' | star_without_slash)* '*/';
  int = integer;
  oct = '0' oct_digit+ ;
  hex = '0' ['x' + 'X'] hex_digit+;
  float = digit* '.' digit* | '.' digit+ ;
  float64 = 'float64';
  bool = 'bool';
  rune = 'rune';
  rune_literal = single_quote ([not_end_of_line - [single_quote + '\']] | escape_single_quote | escape_sequences) single_quote ;
  raw_string_lit = back_quote [all_chars - back_quote]* back_quote ;
  interpreted_string_literal = double_quote ([not_end_of_line - [double_quote + '\']] | escape_double_quote| escape_sequences)* double_quote ;
  id = (letter | '_')(letter | digit | '_')*;
  if = 'if';
  else = 'else';
  eol = line_feed | carriage_return | carriage_return line_feed;
  blank = tab | space;

Ignored Tokens
  eol, blank, comment, block_comment;

Productions
cst_prog {-> program} =
  {prog}    cst_top_decl* cst_stmt*   {-> New program([cst_top_decl.decl], [cst_stmt.stmt])}; 

cst_top_decl {-> decl} =
  {var_decl} cst_var_decl {-> New decl.var_decl_ast(cst_var_decl.var_decl)} |
  {type_decl} cst_type_decl {-> New decl.type_decl_ast(cst_type_decl.type_decl)}
  ;

//type declaration and necessary subproductions here
cst_type_decl {-> type_decl} =
  {single_line} type_keyword type_top_level{-> type_top_level.type_decl} |
  {multi_line} type_keyword l_paren type_top_level* r_paren semicolon {-> New type_decl.multiline_list([type_top_level.type_decl])}
  ;

type_top_level {-> type_decl} = 
  {alias} type_aliasing semicolon {-> type_aliasing.type_decl} |
  {struct} type_struct_declaration {-> type_struct_declaration.type_decl}
  ;

type_aliasing {-> type_decl} = 
  id cst_type {-> New type_decl.type_alias(id, cst_type.var_type)}
  ;
  
type_struct_declaration {-> type_decl} = 
  id struct l_brace type_with_one_or_more_ids* r_brace {-> New type_decl.struct_with_id(id, 
  [type_with_one_or_more_ids.type_decl])}
  ;

type_with_one_or_more_ids {-> type_decl} = 
  {recurse} id comma type_with_one_or_more_ids {-> New type_decl.type_with_many_ids(id, type_with_one_or_more_ids.type_decl)} |
  {base} id cst_type semicolon {-> New type_decl.type_alias(id, cst_type.var_type)}
  ;

//variable declaration and necessary subproductions here
cst_var_decl {-> var_decl} =
  {cst_single_line_decl} var top_var_decl {-> top_var_decl.var_decl} |
  {cst_multi_line_decl} var l_paren top_var_decl* r_paren semicolon {-> New var_decl.multiline_list([top_var_decl.var_decl])}
  ;

top_var_decl {-> var_decl} = 
  {cst_miat} var_id_and_type semicolon {-> var_id_and_type.var_decl} |
  {cst_miae} var_id_and_exp_maybe_type semicolon {-> var_id_and_exp_maybe_type.var_decl}
  ;

var_id_and_type {-> var_decl} = 
  {miat_recurse} id comma var_id_and_type {-> New var_decl.inline_list_no_exp(id, var_id_and_type.var_decl)} |
  {miat_end} id cst_type {-> New var_decl.var_with_type(id, cst_type.var_type)}
  ;

var_id_and_exp_maybe_type {-> var_decl} = 
  {miae_recurse} id [l]:comma var_id_and_exp_maybe_type [r]:comma cst_exp {-> New var_decl.inline_list_with_exp(id, var_id_and_exp_maybe_type.var_decl, cst_exp.exp)} |
  {miae_end} id equals cst_exp {-> New var_decl.var_with_only_exp(id, cst_exp.exp)} |
  {mtae_end} id cst_type equals cst_exp {-> New var_decl.var_with_type_and_exp(id, cst_type.var_type, cst_exp.exp)}
  ;

//general type production for all declarations
cst_type {-> var_type} = 
  {cst_base_type} type {-> New var_type.base_type(type)}|
  {cst_slices} l_brack r_brack cst_type {-> New var_type.slice(cst_type.var_type)} | 
  {cst_arrays} l_brack int r_brack cst_type {-> New var_type.array(cst_type.var_type)}|
  {cst_structs} id {-> New var_type.struct(id)}
  ;

cst_stmt {-> stmt} =
  {cst_print}  print cst_exp semicolon {-> New stmt.print(cst_exp.exp)} |
  {cst_assign} id equals cst_exp semicolon {-> New stmt.assign(id, cst_exp.exp)}; 

cst_exp {-> exp} =
  {cst_plus}   cst_exp plus factor  {-> New exp.plus(cst_exp.exp,factor.exp)} |
  {cst_minus}  cst_exp minus factor {-> New exp.minus(cst_exp.exp,factor.exp)} | 
  {factor}     factor {-> factor.exp};

factor {-> exp} = 
  {cst_times}      factor star uterm  {-> New exp.mult(factor.exp,uterm.exp)} |
  {cst_divide}     factor slash uterm {-> New exp.divide(factor.exp,uterm.exp)} |
  {uterm}          uterm              {-> uterm.exp};

uterm {-> exp} =
  {cst_uminus}  minus uterm   {-> New exp.uminus(uterm.exp)} |
  {term}        term          {-> term.exp};

term {-> exp} =
  {cst_id}        id     {-> New exp.id(id)} |
  {cst_float}     float  {-> New exp.float(float)} |
  {cst_int}       int    {-> New exp.int(int)} |
  {paren}         l_paren cst_exp r_paren  {-> cst_exp.exp};

Abstract Syntax Tree

program = decl* stmt*;

decl = 
  {var_decl_ast} var_decl |
  {type_decl_ast} type_decl
  ;

type_decl = 
  {type_alias} id var_type |
  {type_with_many_ids} id type_decl |
  {struct_with_id} id type_decl* |
  {multiline_list} type_decl*
  ;

var_decl = 
  {var_with_type} id var_type |
  {var_with_only_exp} id exp |
  {var_with_type_and_exp} id var_type exp |
  {inline_list_no_exp} id var_decl |
  {inline_list_with_exp} id var_decl exp |
  {multiline_list} var_decl*
  ;

var_type = 
  {base_type} type |
  {slice} var_type |
  {array} var_type |
  {struct} id
  ;

stmt =
  {read}      id |
  {print}     exp |
  {assign}    id exp |
  {while}     exp stmt* |
  {if}        exp [stmt]:stmt* [end]:stmt |
  {else}      stmt* |
  {empty};

exp =
  {plus}   [l]:exp [r]:exp |
  {minus}  [l]:exp [r]:exp |
  {mult}   [l]:exp [r]:exp |
  {divide} [l]:exp [r]:exp |
  {uminus} exp |
  {id} id |
  {float} float |
  {int} int;

